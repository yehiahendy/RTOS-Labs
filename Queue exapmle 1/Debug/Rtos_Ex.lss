
Rtos_Ex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000015f2  00001686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000645  00800072  00800072  00001698  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047e3  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001159  00000000  00000000  0000628f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028b8  00000000  00000000  000073e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af4  00000000  00000000  00009ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001590  00000000  00000000  0000a794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bab  00000000  00000000  0000bd24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000430  00000000  00000000  000108cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
       c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      18:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      1c:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_7>
      20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      24:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      28:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      30:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      34:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      44:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      48:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      50:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__bad_interrupt>
      54:	b9 00       	.word	0x00b9	; ????
      56:	d2 00       	.word	0x00d2	; ????
      58:	eb 00       	.word	0x00eb	; ????
      5a:	04 01       	movw	r0, r8
      5c:	1c 01       	movw	r2, r24
      5e:	1c 01       	movw	r2, r24
      60:	1c 01       	movw	r2, r24
      62:	1c 01       	movw	r2, r24
      64:	1c 01       	movw	r2, r24
      66:	1c 01       	movw	r2, r24
      68:	1c 01       	movw	r2, r24
      6a:	1c 01       	movw	r2, r24
      6c:	1c 01       	movw	r2, r24
      6e:	1c 01       	movw	r2, r24
      70:	1c 01       	movw	r2, r24
      72:	1c 01       	movw	r2, r24
      74:	1c 01       	movw	r2, r24
      76:	1c 01       	movw	r2, r24
      78:	1c 01       	movw	r2, r24
      7a:	1c 01       	movw	r2, r24
      7c:	1c 01       	movw	r2, r24
      7e:	1c 01       	movw	r2, r24
      80:	1c 01       	movw	r2, r24
      82:	1c 01       	movw	r2, r24
      84:	1c 01       	movw	r2, r24
      86:	1c 01       	movw	r2, r24
      88:	1c 01       	movw	r2, r24
      8a:	1c 01       	movw	r2, r24
      8c:	1c 01       	movw	r2, r24
      8e:	1c 01       	movw	r2, r24
      90:	1c 01       	movw	r2, r24
      92:	1c 01       	movw	r2, r24
      94:	b9 00       	.word	0x00b9	; ????
      96:	d2 00       	.word	0x00d2	; ????
      98:	eb 00       	.word	0x00eb	; ????
      9a:	04 01       	movw	r0, r8
      9c:	28 01       	movw	r4, r16
      9e:	30 01       	movw	r6, r0
      a0:	38 01       	movw	r6, r16
      a2:	40 01       	movw	r8, r0
      a4:	47 01       	movw	r8, r14
      a6:	47 01       	movw	r8, r14
      a8:	47 01       	movw	r8, r14
      aa:	47 01       	movw	r8, r14
      ac:	47 01       	movw	r8, r14
      ae:	47 01       	movw	r8, r14
      b0:	47 01       	movw	r8, r14
      b2:	47 01       	movw	r8, r14
      b4:	47 01       	movw	r8, r14
      b6:	47 01       	movw	r8, r14
      b8:	47 01       	movw	r8, r14
      ba:	47 01       	movw	r8, r14
      bc:	47 01       	movw	r8, r14
      be:	47 01       	movw	r8, r14
      c0:	47 01       	movw	r8, r14
      c2:	47 01       	movw	r8, r14
      c4:	47 01       	movw	r8, r14
      c6:	47 01       	movw	r8, r14
      c8:	47 01       	movw	r8, r14
      ca:	47 01       	movw	r8, r14
      cc:	47 01       	movw	r8, r14
      ce:	47 01       	movw	r8, r14
      d0:	47 01       	movw	r8, r14
      d2:	47 01       	movw	r8, r14
      d4:	47 01       	movw	r8, r14
      d6:	47 01       	movw	r8, r14
      d8:	47 01       	movw	r8, r14
      da:	47 01       	movw	r8, r14
      dc:	28 01       	movw	r4, r16
      de:	30 01       	movw	r6, r0
      e0:	38 01       	movw	r6, r16
      e2:	40 01       	movw	r8, r0

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf e5       	ldi	r28, 0x5F	; 95
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	a0 e6       	ldi	r26, 0x60	; 96
      f4:	b0 e0       	ldi	r27, 0x00	; 0
      f6:	e2 ef       	ldi	r30, 0xF2	; 242
      f8:	f5 e1       	ldi	r31, 0x15	; 21
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	a2 37       	cpi	r26, 0x72	; 114
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	26 e0       	ldi	r18, 0x06	; 6
     108:	a2 e7       	ldi	r26, 0x72	; 114
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a7 3b       	cpi	r26, 0xB7	; 183
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>
     116:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <main>
     11a:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_exit>

0000011e <__bad_interrupt>:
     11e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000122 <Seg_init>:
 *  Author: yehia
 */ 
#include "seg.h"
	void Seg_init()
	{
		DIO_WritePinDir(Seg,Seg_A,STD_OUT);
     122:	41 e0       	ldi	r20, 0x01	; 1
     124:	64 e0       	ldi	r22, 0x04	; 4
     126:	81 e4       	ldi	r24, 0x41	; 65
     128:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_WritePinDir>
		DIO_WritePinDir(Seg,Seg_B,STD_OUT);
     12c:	41 e0       	ldi	r20, 0x01	; 1
     12e:	65 e0       	ldi	r22, 0x05	; 5
     130:	81 e4       	ldi	r24, 0x41	; 65
     132:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_WritePinDir>
		DIO_WritePinDir(Seg,Seg_C,STD_OUT);
     136:	41 e0       	ldi	r20, 0x01	; 1
     138:	66 e0       	ldi	r22, 0x06	; 6
     13a:	81 e4       	ldi	r24, 0x41	; 65
     13c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_WritePinDir>
		DIO_WritePinDir(Seg,Seg_D,STD_OUT);
     140:	41 e0       	ldi	r20, 0x01	; 1
     142:	67 e0       	ldi	r22, 0x07	; 7
     144:	81 e4       	ldi	r24, 0x41	; 65
     146:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_WritePinDir>
     14a:	08 95       	ret

0000014c <Seg_Write>:
	}
	
	void Seg_Write(uint8 num)
	{
		Dio_WriteHighNibbleVal(Seg,num<<4);
     14c:	68 2f       	mov	r22, r24
     14e:	62 95       	swap	r22
     150:	60 7f       	andi	r22, 0xF0	; 240
     152:	81 e4       	ldi	r24, 0x41	; 65
     154:	0e 94 1d 01 	call	0x23a	; 0x23a <Dio_WriteHighNibbleVal>
     158:	08 95       	ret

0000015a <DIO_WritePinDir>:
		case  'c':
		PORT_C = Level == STD_low ?0x00:0xFF;
		break;
		case 'D':
		case  'd':
		PORT_D = Level == STD_low ?0x00:0xFF;
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	e1 54       	subi	r30, 0x41	; 65
     160:	f1 09       	sbc	r31, r1
     162:	e4 32       	cpi	r30, 0x24	; 36
     164:	f1 05       	cpc	r31, r1
     166:	08 f0       	brcs	.+2      	; 0x16a <DIO_WritePinDir+0x10>
     168:	67 c0       	rjmp	.+206    	; 0x238 <DIO_WritePinDir+0xde>
     16a:	e6 5d       	subi	r30, 0xD6	; 214
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__tablejump2__>
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	59 f4       	brne	.+22     	; 0x18c <DIO_WritePinDir+0x32>
     176:	2a b3       	in	r18, 0x1a	; 26
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_WritePinDir+0x28>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	6a 95       	dec	r22
     184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_WritePinDir+0x24>
     186:	82 2b       	or	r24, r18
     188:	8a bb       	out	0x1a, r24	; 26
     18a:	08 95       	ret
     18c:	2a b3       	in	r18, 0x1a	; 26
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_WritePinDir+0x3e>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	6a 95       	dec	r22
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_WritePinDir+0x3a>
     19c:	80 95       	com	r24
     19e:	82 23       	and	r24, r18
     1a0:	8a bb       	out	0x1a, r24	; 26
     1a2:	08 95       	ret
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_WritePinDir+0x64>
     1a8:	27 b3       	in	r18, 0x17	; 23
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_WritePinDir+0x5a>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_WritePinDir+0x56>
     1b8:	82 2b       	or	r24, r18
     1ba:	87 bb       	out	0x17, r24	; 23
     1bc:	08 95       	ret
     1be:	27 b3       	in	r18, 0x17	; 23
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_WritePinDir+0x70>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_WritePinDir+0x6c>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	87 bb       	out	0x17, r24	; 23
     1d4:	08 95       	ret
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_WritePinDir+0x96>
     1da:	24 b3       	in	r18, 0x14	; 20
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_WritePinDir+0x8c>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_WritePinDir+0x88>
     1ea:	82 2b       	or	r24, r18
     1ec:	84 bb       	out	0x14, r24	; 20
     1ee:	08 95       	ret
     1f0:	24 b3       	in	r18, 0x14	; 20
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_WritePinDir+0xa2>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_WritePinDir+0x9e>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	84 bb       	out	0x14, r24	; 20
     206:	08 95       	ret
     208:	41 30       	cpi	r20, 0x01	; 1
     20a:	59 f4       	brne	.+22     	; 0x222 <DIO_WritePinDir+0xc8>
     20c:	21 b3       	in	r18, 0x11	; 17
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_WritePinDir+0xbe>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_WritePinDir+0xba>
     21c:	82 2b       	or	r24, r18
     21e:	81 bb       	out	0x11, r24	; 17
     220:	08 95       	ret
     222:	21 b3       	in	r18, 0x11	; 17
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_WritePinDir+0xd4>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_WritePinDir+0xd0>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	81 bb       	out	0x11, r24	; 17
     238:	08 95       	ret

0000023a <Dio_WriteHighNibbleVal>:
		break;
	}
}
void Dio_WriteHighNibbleVal(uint8 port, uint8 val)
{
	switch(port) 
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	e1 54       	subi	r30, 0x41	; 65
     240:	f1 09       	sbc	r31, r1
     242:	e4 32       	cpi	r30, 0x24	; 36
     244:	f1 05       	cpc	r31, r1
     246:	18 f5       	brcc	.+70     	; 0x28e <Dio_WriteHighNibbleVal+0x54>
     248:	e2 5b       	subi	r30, 0xB2	; 178
     24a:	ff 4f       	sbci	r31, 0xFF	; 255
     24c:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORT_A &= 0x0F; //clear the the last 4 bit in port A 
     250:	8b b3       	in	r24, 0x1b	; 27
     252:	8f 70       	andi	r24, 0x0F	; 15
     254:	8b bb       	out	0x1b, r24	; 27
		PORT_A |= (val & 0xF0);   //set the value of the last 4 bit in port A
     256:	8b b3       	in	r24, 0x1b	; 27
     258:	60 7f       	andi	r22, 0xF0	; 240
     25a:	68 2b       	or	r22, r24
     25c:	6b bb       	out	0x1b, r22	; 27
		break;
     25e:	08 95       	ret
		case 'B':
		case 'b':
		PORT_B &= 0x0F; //clear the the last 4 bit in port B
     260:	88 b3       	in	r24, 0x18	; 24
     262:	8f 70       	andi	r24, 0x0F	; 15
     264:	88 bb       	out	0x18, r24	; 24
		PORT_B |= (val & 0xF0);   //set the value of the last 4 bit in port B
     266:	88 b3       	in	r24, 0x18	; 24
     268:	60 7f       	andi	r22, 0xF0	; 240
     26a:	68 2b       	or	r22, r24
     26c:	68 bb       	out	0x18, r22	; 24
		break;
     26e:	08 95       	ret
		case 'C':
		case 'c':
		PORT_C &= 0x0F; //clear the the last 4 bit in port c
     270:	85 b3       	in	r24, 0x15	; 21
     272:	8f 70       	andi	r24, 0x0F	; 15
     274:	85 bb       	out	0x15, r24	; 21
		PORT_C |= (val & 0xF0);   //set the value of the last 4 bit in port c
     276:	85 b3       	in	r24, 0x15	; 21
     278:	60 7f       	andi	r22, 0xF0	; 240
     27a:	68 2b       	or	r22, r24
     27c:	65 bb       	out	0x15, r22	; 21
		break;
     27e:	08 95       	ret
		case 'D':
		case 'd':
		PORT_D  &= 0x0F; //clear the the last 4 bit in port D
     280:	82 b3       	in	r24, 0x12	; 18
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	82 bb       	out	0x12, r24	; 18
		PORT_D |= (val & 0xF0);    //set the value of the last 4 bit in port D
     286:	82 b3       	in	r24, 0x12	; 18
     288:	60 7f       	andi	r22, 0xF0	; 240
     28a:	68 2b       	or	r22, r24
     28c:	62 bb       	out	0x12, r22	; 18
     28e:	08 95       	ret

00000290 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     29a:	0e 94 8c 08 	call	0x1118	; 0x1118 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     29e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
     2a2:	81 11       	cpse	r24, r1
     2a4:	1d c0       	rjmp	.+58     	; 0x2e0 <pvPortMalloc+0x50>
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     2a6:	e7 e7       	ldi	r30, 0x77	; 119
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	8c e7       	ldi	r24, 0x7C	; 124
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	91 83       	std	Z+1, r25	; 0x01
     2b0:	80 83       	st	Z, r24
    xStart.xBlockSize = ( size_t ) 0;
     2b2:	13 82       	std	Z+3, r1	; 0x03
     2b4:	12 82       	std	Z+2, r1	; 0x02

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     2b6:	e3 e7       	ldi	r30, 0x73	; 115
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	8b ed       	ldi	r24, 0xDB	; 219
     2bc:	95 e0       	ldi	r25, 0x05	; 5
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	82 83       	std	Z+2, r24	; 0x02
    xEnd.pxNextFreeBlock = NULL;
     2c2:	11 82       	std	Z+1, r1	; 0x01
     2c4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     2c6:	ab e7       	ldi	r26, 0x7B	; 123
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	14 96       	adiw	r26, 0x04	; 4
     2cc:	9c 93       	st	X, r25
     2ce:	8e 93       	st	-X, r24
     2d0:	13 97       	sbiw	r26, 0x03	; 3
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     2d2:	12 96       	adiw	r26, 0x02	; 2
     2d4:	fc 93       	st	X, r31
     2d6:	ee 93       	st	-X, r30
     2d8:	11 97       	sbiw	r26, 0x01	; 1
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
        {
            prvHeapInit();
            xHeapHasBeenInitialised = pdTRUE;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
        }

        /* The wanted size is increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( xWantedSize > 0 )
     2e0:	20 97       	sbiw	r28, 0x00	; 0
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <pvPortMalloc+0x56>
     2e4:	5f c0       	rjmp	.+190    	; 0x3a4 <pvPortMalloc+0x114>
        {
            xWantedSize += heapSTRUCT_SIZE;
     2e6:	9e 01       	movw	r18, r28
     2e8:	2c 5f       	subi	r18, 0xFC	; 252
     2ea:	3f 4f       	sbci	r19, 0xFF	; 255
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
            }
        }

        if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     2ec:	23 96       	adiw	r28, 0x03	; 3
     2ee:	ca 3d       	cpi	r28, 0xDA	; 218
     2f0:	d5 40       	sbci	r29, 0x05	; 5
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <pvPortMalloc+0x66>
     2f4:	5a c0       	rjmp	.+180    	; 0x3aa <pvPortMalloc+0x11a>
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;
     2f6:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <xStart>
     2fa:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <xStart+0x1>

        if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
        {
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
     2fe:	a7 e7       	ldi	r26, 0x77	; 119
     300:	b0 e0       	ldi	r27, 0x00	; 0
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     302:	02 c0       	rjmp	.+4      	; 0x308 <pvPortMalloc+0x78>
     304:	df 01       	movw	r26, r30
            {
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
     306:	fc 01       	movw	r30, r24
            /* Blocks are stored in byte order - traverse the list from the start
             * (smallest) block until one of adequate size is found. */
            pxPreviousBlock = &xStart;
            pxBlock = xStart.pxNextFreeBlock;

            while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     308:	82 81       	ldd	r24, Z+2	; 0x02
     30a:	93 81       	ldd	r25, Z+3	; 0x03
     30c:	82 17       	cp	r24, r18
     30e:	93 07       	cpc	r25, r19
     310:	20 f4       	brcc	.+8      	; 0x31a <pvPortMalloc+0x8a>
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	00 97       	sbiw	r24, 0x00	; 0
     318:	a9 f7       	brne	.-22     	; 0x304 <pvPortMalloc+0x74>
                pxPreviousBlock = pxBlock;
                pxBlock = pxBlock->pxNextFreeBlock;
            }

            /* If we found the end marker then a block of adequate size was not found. */
            if( pxBlock != &xEnd )
     31a:	c0 e0       	ldi	r28, 0x00	; 0
     31c:	e3 37       	cpi	r30, 0x73	; 115
     31e:	fc 07       	cpc	r31, r28
     320:	09 f4       	brne	.+2      	; 0x324 <pvPortMalloc+0x94>
     322:	46 c0       	rjmp	.+140    	; 0x3b0 <pvPortMalloc+0x120>
            {
                /* Return the memory space - jumping over the BlockLink_t structure
                 * at its start. */
                pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     324:	cd 91       	ld	r28, X+
     326:	dc 91       	ld	r29, X
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	8e 01       	movw	r16, r28
     32c:	0c 5f       	subi	r16, 0xFC	; 252
     32e:	1f 4f       	sbci	r17, 0xFF	; 255

                /* This block is being returned for use so must be taken out of the
                 * list of free blocks. */
                pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     330:	80 81       	ld	r24, Z
     332:	91 81       	ldd	r25, Z+1	; 0x01
     334:	8d 93       	st	X+, r24
     336:	9c 93       	st	X, r25

                /* If the block is larger than required it can be split into two. */
                if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     338:	82 81       	ldd	r24, Z+2	; 0x02
     33a:	93 81       	ldd	r25, Z+3	; 0x03
     33c:	82 1b       	sub	r24, r18
     33e:	93 0b       	sbc	r25, r19
     340:	89 30       	cpi	r24, 0x09	; 9
     342:	91 05       	cpc	r25, r1
     344:	10 f1       	brcs	.+68     	; 0x38a <pvPortMalloc+0xfa>
                {
                    /* This block is to be split into two.  Create a new block
                     * following the number of bytes requested. The void cast is
                     * used to prevent byte alignment warnings from the compiler. */
                    pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     346:	bf 01       	movw	r22, r30
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19

                    /* Calculate the sizes of two blocks split from the single
                     * block. */
                    pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     34c:	db 01       	movw	r26, r22
     34e:	13 96       	adiw	r26, 0x03	; 3
     350:	9c 93       	st	X, r25
     352:	8e 93       	st	-X, r24
     354:	12 97       	sbiw	r26, 0x02	; 2
                    pxBlock->xBlockSize = xWantedSize;
     356:	33 83       	std	Z+3, r19	; 0x03
     358:	22 83       	std	Z+2, r18	; 0x02

                    /* Insert the new block into the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     35a:	12 96       	adiw	r26, 0x02	; 2
     35c:	4d 91       	ld	r20, X+
     35e:	5c 91       	ld	r21, X
     360:	13 97       	sbiw	r26, 0x03	; 3
     362:	87 e7       	ldi	r24, 0x77	; 119
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	01 c0       	rjmp	.+2      	; 0x36a <pvPortMalloc+0xda>
     368:	cd 01       	movw	r24, r26
     36a:	ec 01       	movw	r28, r24
     36c:	a8 81       	ld	r26, Y
     36e:	b9 81       	ldd	r27, Y+1	; 0x01
     370:	12 96       	adiw	r26, 0x02	; 2
     372:	2d 91       	ld	r18, X+
     374:	3c 91       	ld	r19, X
     376:	13 97       	sbiw	r26, 0x03	; 3
     378:	24 17       	cp	r18, r20
     37a:	35 07       	cpc	r19, r21
     37c:	a8 f3       	brcs	.-22     	; 0x368 <pvPortMalloc+0xd8>
     37e:	eb 01       	movw	r28, r22
     380:	b9 83       	std	Y+1, r27	; 0x01
     382:	a8 83       	st	Y, r26
     384:	dc 01       	movw	r26, r24
     386:	6d 93       	st	X+, r22
     388:	7c 93       	st	X, r23
                }

                xFreeBytesRemaining -= pxBlock->xBlockSize;
     38a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     38e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     392:	22 81       	ldd	r18, Z+2	; 0x02
     394:	33 81       	ldd	r19, Z+3	; 0x03
     396:	82 1b       	sub	r24, r18
     398:	93 0b       	sbc	r25, r19
     39a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     39e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <pvPortMalloc+0x124>

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <pvPortMalloc+0x124>
     3aa:	00 e0       	ldi	r16, 0x00	; 0
     3ac:	10 e0       	ldi	r17, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <pvPortMalloc+0x124>
     3b0:	00 e0       	ldi	r16, 0x00	; 0
     3b2:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3b4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     3b8:	c8 01       	movw	r24, r16
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	41 f1       	breq	.+80     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3d0:	ec 01       	movw	r28, r24
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     3d2:	8c 01       	movw	r16, r24
     3d4:	04 50       	subi	r16, 0x04	; 4
     3d6:	11 09       	sbc	r17, r1

        /* This unexpected casting is to keep some compilers from issuing
         * byte alignment warnings. */
        pxLink = ( void * ) puc;

        vTaskSuspendAll();
     3d8:	0e 94 8c 08 	call	0x1118	; 0x1118 <vTaskSuspendAll>
        {
            /* Add this block to the list of free blocks. */
            prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     3dc:	f8 01       	movw	r30, r16
     3de:	42 81       	ldd	r20, Z+2	; 0x02
     3e0:	53 81       	ldd	r21, Z+3	; 0x03
     3e2:	a7 e7       	ldi	r26, 0x77	; 119
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <vPortFree+0x26>
     3e8:	df 01       	movw	r26, r30
     3ea:	ed 91       	ld	r30, X+
     3ec:	fc 91       	ld	r31, X
     3ee:	11 97       	sbiw	r26, 0x01	; 1
     3f0:	22 81       	ldd	r18, Z+2	; 0x02
     3f2:	33 81       	ldd	r19, Z+3	; 0x03
     3f4:	24 17       	cp	r18, r20
     3f6:	35 07       	cpc	r19, r21
     3f8:	b8 f3       	brcs	.-18     	; 0x3e8 <vPortFree+0x24>
     3fa:	24 97       	sbiw	r28, 0x04	; 4
     3fc:	f9 83       	std	Y+1, r31	; 0x01
     3fe:	e8 83       	st	Y, r30
     400:	0d 93       	st	X+, r16
     402:	1c 93       	st	X, r17
            xFreeBytesRemaining += pxLink->xBlockSize;
     404:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     408:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	9b 81       	ldd	r25, Y+3	; 0x03
     410:	82 0f       	add	r24, r18
     412:	93 1f       	adc	r25, r19
     414:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     418:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
            traceFREE( pv, pxLink->xBlockSize );
        }
        ( void ) xTaskResumeAll();
     41c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
    }
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     42a:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     42c:	03 96       	adiw	r24, 0x03	; 3
     42e:	92 83       	std	Z+2, r25	; 0x02
     430:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     432:	2f ef       	ldi	r18, 0xFF	; 255
     434:	3f ef       	ldi	r19, 0xFF	; 255
     436:	34 83       	std	Z+4, r19	; 0x04
     438:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     43a:	96 83       	std	Z+6, r25	; 0x06
     43c:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     43e:	90 87       	std	Z+8, r25	; 0x08
     440:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     442:	10 82       	st	Z, r1
     444:	08 95       	ret

00000446 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     446:	fc 01       	movw	r30, r24
     448:	11 86       	std	Z+9, r1	; 0x09
     44a:	10 86       	std	Z+8, r1	; 0x08
     44c:	08 95       	ret

0000044e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	9c 01       	movw	r18, r24
     454:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     456:	dc 01       	movw	r26, r24
     458:	11 96       	adiw	r26, 0x01	; 1
     45a:	cd 91       	ld	r28, X+
     45c:	dc 91       	ld	r29, X
     45e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     460:	d3 83       	std	Z+3, r29	; 0x03
     462:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	9d 81       	ldd	r25, Y+5	; 0x05
     468:	95 83       	std	Z+5, r25	; 0x05
     46a:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     46c:	8c 81       	ldd	r24, Y+4	; 0x04
     46e:	9d 81       	ldd	r25, Y+5	; 0x05
     470:	dc 01       	movw	r26, r24
     472:	13 96       	adiw	r26, 0x03	; 3
     474:	7c 93       	st	X, r23
     476:	6e 93       	st	-X, r22
     478:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     47a:	7d 83       	std	Y+5, r23	; 0x05
     47c:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     47e:	31 87       	std	Z+9, r19	; 0x09
     480:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     482:	f9 01       	movw	r30, r18
     484:	80 81       	ld	r24, Z
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	80 83       	st	Z, r24
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     496:	48 81       	ld	r20, Y
     498:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     49a:	4f 3f       	cpi	r20, 0xFF	; 255
     49c:	2f ef       	ldi	r18, 0xFF	; 255
     49e:	52 07       	cpc	r21, r18
     4a0:	21 f4       	brne	.+8      	; 0x4aa <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     4a2:	fc 01       	movw	r30, r24
     4a4:	a7 81       	ldd	r26, Z+7	; 0x07
     4a6:	b0 85       	ldd	r27, Z+8	; 0x08
     4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     4aa:	dc 01       	movw	r26, r24
     4ac:	13 96       	adiw	r26, 0x03	; 3
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <vListInsert+0x22>
     4b0:	df 01       	movw	r26, r30
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	ed 91       	ld	r30, X+
     4b6:	fc 91       	ld	r31, X
     4b8:	13 97       	sbiw	r26, 0x03	; 3
     4ba:	20 81       	ld	r18, Z
     4bc:	31 81       	ldd	r19, Z+1	; 0x01
     4be:	42 17       	cp	r20, r18
     4c0:	53 07       	cpc	r21, r19
     4c2:	b0 f7       	brcc	.-20     	; 0x4b0 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4c4:	12 96       	adiw	r26, 0x02	; 2
     4c6:	ed 91       	ld	r30, X+
     4c8:	fc 91       	ld	r31, X
     4ca:	13 97       	sbiw	r26, 0x03	; 3
     4cc:	fb 83       	std	Y+3, r31	; 0x03
     4ce:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4d0:	d5 83       	std	Z+5, r29	; 0x05
     4d2:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     4d4:	bd 83       	std	Y+5, r27	; 0x05
     4d6:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     4d8:	13 96       	adiw	r26, 0x03	; 3
     4da:	dc 93       	st	X, r29
     4dc:	ce 93       	st	-X, r28
     4de:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4e0:	99 87       	std	Y+9, r25	; 0x09
     4e2:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 81       	ld	r18, Z
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	20 83       	st	Z, r18
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4f8:	a0 85       	ldd	r26, Z+8	; 0x08
     4fa:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4fc:	c2 81       	ldd	r28, Z+2	; 0x02
     4fe:	d3 81       	ldd	r29, Z+3	; 0x03
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	95 81       	ldd	r25, Z+5	; 0x05
     504:	9d 83       	std	Y+5, r25	; 0x05
     506:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     508:	c4 81       	ldd	r28, Z+4	; 0x04
     50a:	d5 81       	ldd	r29, Z+5	; 0x05
     50c:	82 81       	ldd	r24, Z+2	; 0x02
     50e:	93 81       	ldd	r25, Z+3	; 0x03
     510:	9b 83       	std	Y+3, r25	; 0x03
     512:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	8d 91       	ld	r24, X+
     518:	9c 91       	ld	r25, X
     51a:	12 97       	sbiw	r26, 0x02	; 2
     51c:	e8 17       	cp	r30, r24
     51e:	f9 07       	cpc	r31, r25
     520:	31 f4       	brne	.+12     	; 0x52e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     522:	84 81       	ldd	r24, Z+4	; 0x04
     524:	95 81       	ldd	r25, Z+5	; 0x05
     526:	12 96       	adiw	r26, 0x02	; 2
     528:	9c 93       	st	X, r25
     52a:	8e 93       	st	-X, r24
     52c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     52e:	11 86       	std	Z+9, r1	; 0x09
     530:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     532:	8c 91       	ld	r24, X
     534:	81 50       	subi	r24, 0x01	; 1
     536:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     538:	8c 91       	ld	r24, X
}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <Receive>:
    {
    }
}

void Receive(void *p)
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	uint8 read = 0; 
     54a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		xQueueReceive(Handle1,&read,portMAX_DELAY);
     54c:	4f ef       	ldi	r20, 0xFF	; 255
     54e:	5f ef       	ldi	r21, 0xFF	; 255
     550:	be 01       	movw	r22, r28
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <Handle1>
     55a:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <Handle1+0x1>
     55e:	0e 94 21 06 	call	0xc42	; 0xc42 <xQueueReceive>
		Seg_Write(read);
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	0e 94 a6 00 	call	0x14c	; 0x14c <Seg_Write>
     568:	f1 cf       	rjmp	.-30     	; 0x54c <Receive+0xc>

0000056a <Send>:
		
		
	}
}
void Send(void *p)
{
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	1f 92       	push	r1
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	
	DIO_WritePinDir('d',3,STD_IN);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	63 e0       	ldi	r22, 0x03	; 3
     578:	84 e6       	ldi	r24, 0x64	; 100
     57a:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_WritePinDir>
	uint8 counter = 0 ; 
     57e:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		if ((GET_Bit(PIN_D,3)) != 0)
     580:	83 9b       	sbis	0x10, 3	; 16
     582:	09 c0       	rjmp	.+18     	; 0x596 <Send+0x2c>
		{
			vTaskDelay(150/portTICK_PERIOD_MS);
     584:	86 e9       	ldi	r24, 0x96	; 150
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <vTaskDelay>
			if ((GET_Bit(PIN_D,3)) != 0)
     58c:	83 9b       	sbis	0x10, 3	; 16
     58e:	03 c0       	rjmp	.+6      	; 0x596 <Send+0x2c>
			{
				
				counter++;
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	8f 5f       	subi	r24, 0xFF	; 255
     594:	89 83       	std	Y+1, r24	; 0x01
			}

		}
		if (counter == 10)
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8a 30       	cpi	r24, 0x0A	; 10
     59a:	09 f4       	brne	.+2      	; 0x59e <Send+0x34>
		{
			counter = 0;
     59c:	19 82       	std	Y+1, r1	; 0x01
		}
		xQueueSendToBack(Handle1,&counter,portMAX_DELAY);
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	4f ef       	ldi	r20, 0xFF	; 255
     5a2:	5f ef       	ldi	r21, 0xFF	; 255
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <Handle1>
     5ae:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <Handle1+0x1>
     5b2:	0e 94 80 05 	call	0xb00	; 0xb00 <xQueueGenericSend>
	}
     5b6:	e4 cf       	rjmp	.-56     	; 0x580 <Send+0x16>

000005b8 <main>:
void Receive(void *p);
void Send(void *p);
xQueueHandle Handle1 ;
int main(void)
{
	Seg_init();
     5b8:	0e 94 91 00 	call	0x122	; 0x122 <Seg_init>
	Handle1 = xQueueCreate(1,sizeof(uint8));
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 5d 05 	call	0xaba	; 0xaba <xQueueGenericCreate>
     5c6:	90 93 b6 06 	sts	0x06B6, r25	; 0x8006b6 <Handle1+0x1>
     5ca:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <Handle1>
	if (Handle1 != NULL)
     5ce:	89 2b       	or	r24, r25
     5d0:	c9 f0       	breq	.+50     	; 0x604 <main+0x4c>
	{
			xTaskCreate(Receive,"Read",300,NULL,2,NULL);
     5d2:	e1 2c       	mov	r14, r1
     5d4:	f1 2c       	mov	r15, r1
     5d6:	02 e0       	ldi	r16, 0x02	; 2
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	4c e2       	ldi	r20, 0x2C	; 44
     5de:	51 e0       	ldi	r21, 0x01	; 1
     5e0:	62 e6       	ldi	r22, 0x62	; 98
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 ea       	ldi	r24, 0xA0	; 160
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 52 07 	call	0xea4	; 0xea4 <xTaskCreate>
			xTaskCreate(Send,"send",300,NULL,2,NULL);
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	4c e2       	ldi	r20, 0x2C	; 44
     5f2:	51 e0       	ldi	r21, 0x01	; 1
     5f4:	67 e6       	ldi	r22, 0x67	; 103
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	85 eb       	ldi	r24, 0xB5	; 181
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 52 07 	call	0xea4	; 0xea4 <xTaskCreate>
			vTaskStartScheduler();
     600:	0e 94 62 08 	call	0x10c4	; 0x10c4 <vTaskStartScheduler>
     604:	ff cf       	rjmp	.-2      	; 0x604 <main+0x4c>

00000606 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     606:	31 e1       	ldi	r19, 0x11	; 17
     608:	fc 01       	movw	r30, r24
     60a:	30 83       	st	Z, r19
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	22 e2       	ldi	r18, 0x22	; 34
     610:	20 83       	st	Z, r18
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	a3 e3       	ldi	r26, 0x33	; 51
     616:	a0 83       	st	Z, r26
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	60 83       	st	Z, r22
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	70 83       	st	Z, r23
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	10 82       	st	Z, r1
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	60 e8       	ldi	r22, 0x80	; 128
     628:	60 83       	st	Z, r22
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	10 82       	st	Z, r1
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	62 e0       	ldi	r22, 0x02	; 2
     632:	60 83       	st	Z, r22
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	63 e0       	ldi	r22, 0x03	; 3
     638:	60 83       	st	Z, r22
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	64 e0       	ldi	r22, 0x04	; 4
     63e:	60 83       	st	Z, r22
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	65 e0       	ldi	r22, 0x05	; 5
     644:	60 83       	st	Z, r22
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	66 e0       	ldi	r22, 0x06	; 6
     64a:	60 83       	st	Z, r22
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	67 e0       	ldi	r22, 0x07	; 7
     650:	60 83       	st	Z, r22
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	68 e0       	ldi	r22, 0x08	; 8
     656:	60 83       	st	Z, r22
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	69 e0       	ldi	r22, 0x09	; 9
     65c:	60 83       	st	Z, r22
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	60 e1       	ldi	r22, 0x10	; 16
     662:	60 83       	st	Z, r22
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	30 83       	st	Z, r19
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	32 e1       	ldi	r19, 0x12	; 18
     66c:	30 83       	st	Z, r19
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	33 e1       	ldi	r19, 0x13	; 19
     672:	30 83       	st	Z, r19
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	34 e1       	ldi	r19, 0x14	; 20
     678:	30 83       	st	Z, r19
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	35 e1       	ldi	r19, 0x15	; 21
     67e:	30 83       	st	Z, r19
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	36 e1       	ldi	r19, 0x16	; 22
     684:	30 83       	st	Z, r19
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	37 e1       	ldi	r19, 0x17	; 23
     68a:	30 83       	st	Z, r19
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	38 e1       	ldi	r19, 0x18	; 24
     690:	30 83       	st	Z, r19
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	39 e1       	ldi	r19, 0x19	; 25
     696:	30 83       	st	Z, r19
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	30 e2       	ldi	r19, 0x20	; 32
     69c:	30 83       	st	Z, r19
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	31 e2       	ldi	r19, 0x21	; 33
     6a2:	30 83       	st	Z, r19
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	20 83       	st	Z, r18
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	23 e2       	ldi	r18, 0x23	; 35
     6ac:	20 83       	st	Z, r18
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	40 83       	st	Z, r20
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	50 83       	st	Z, r21
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	26 e2       	ldi	r18, 0x26	; 38
     6ba:	20 83       	st	Z, r18
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	27 e2       	ldi	r18, 0x27	; 39
     6c0:	20 83       	st	Z, r18
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	28 e2       	ldi	r18, 0x28	; 40
     6c6:	20 83       	st	Z, r18
     6c8:	31 97       	sbiw	r30, 0x01	; 1
     6ca:	29 e2       	ldi	r18, 0x29	; 41
     6cc:	20 83       	st	Z, r18
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	20 e3       	ldi	r18, 0x30	; 48
     6d2:	20 83       	st	Z, r18
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	21 e3       	ldi	r18, 0x31	; 49
     6d8:	20 83       	st	Z, r18
     6da:	86 97       	sbiw	r24, 0x26	; 38
     6dc:	08 95       	ret

000006de <xPortStartScheduler>:
     6de:	1b bc       	out	0x2b, r1	; 43
     6e0:	89 ef       	ldi	r24, 0xF9	; 249
     6e2:	8a bd       	out	0x2a, r24	; 42
     6e4:	8b e0       	ldi	r24, 0x0B	; 11
     6e6:	8e bd       	out	0x2e, r24	; 46
     6e8:	89 b7       	in	r24, 0x39	; 57
     6ea:	80 61       	ori	r24, 0x10	; 16
     6ec:	89 bf       	out	0x39, r24	; 57
     6ee:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     6f2:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     6f6:	cd 91       	ld	r28, X+
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	dd 91       	ld	r29, X+
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	7f 90       	pop	r7
     730:	6f 90       	pop	r6
     732:	5f 90       	pop	r5
     734:	4f 90       	pop	r4
     736:	3f 90       	pop	r3
     738:	2f 90       	pop	r2
     73a:	1f 90       	pop	r1
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	08 95       	ret
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	08 95       	ret

00000748 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	0f 92       	push	r0
     750:	1f 92       	push	r1
     752:	11 24       	eor	r1, r1
     754:	2f 92       	push	r2
     756:	3f 92       	push	r3
     758:	4f 92       	push	r4
     75a:	5f 92       	push	r5
     75c:	6f 92       	push	r6
     75e:	7f 92       	push	r7
     760:	8f 92       	push	r8
     762:	9f 92       	push	r9
     764:	af 92       	push	r10
     766:	bf 92       	push	r11
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	2f 93       	push	r18
     776:	3f 93       	push	r19
     778:	4f 93       	push	r20
     77a:	5f 93       	push	r21
     77c:	6f 93       	push	r22
     77e:	7f 93       	push	r23
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	af 93       	push	r26
     786:	bf 93       	push	r27
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ef 93       	push	r30
     78e:	ff 93       	push	r31
     790:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     794:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     798:	0d b6       	in	r0, 0x3d	; 61
     79a:	0d 92       	st	X+, r0
     79c:	0e b6       	in	r0, 0x3e	; 62
     79e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     7a0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     7a4:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     7a8:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     7ac:	cd 91       	ld	r28, X+
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	dd 91       	ld	r29, X+
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	ff 91       	pop	r31
     7b6:	ef 91       	pop	r30
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	bf 90       	pop	r11
     7de:	af 90       	pop	r10
     7e0:	9f 90       	pop	r9
     7e2:	8f 90       	pop	r8
     7e4:	7f 90       	pop	r7
     7e6:	6f 90       	pop	r6
     7e8:	5f 90       	pop	r5
     7ea:	4f 90       	pop	r4
     7ec:	3f 90       	pop	r3
     7ee:	2f 90       	pop	r2
     7f0:	1f 90       	pop	r1
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     7f8:	08 95       	ret

000007fa <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	0f 92       	push	r0
     802:	1f 92       	push	r1
     804:	11 24       	eor	r1, r1
     806:	2f 92       	push	r2
     808:	3f 92       	push	r3
     80a:	4f 92       	push	r4
     80c:	5f 92       	push	r5
     80e:	6f 92       	push	r6
     810:	7f 92       	push	r7
     812:	8f 92       	push	r8
     814:	9f 92       	push	r9
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
     842:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     846:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     84a:	0d b6       	in	r0, 0x3d	; 61
     84c:	0d 92       	st	X+, r0
     84e:	0e b6       	in	r0, 0x3e	; 62
     850:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     852:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskIncrementTick>
     856:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     858:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     85c:	a0 91 b3 06 	lds	r26, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     860:	b0 91 b4 06 	lds	r27, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     864:	cd 91       	ld	r28, X+
     866:	cd bf       	out	0x3d, r28	; 61
     868:	dd 91       	ld	r29, X+
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	bf 91       	pop	r27
     876:	af 91       	pop	r26
     878:	9f 91       	pop	r25
     87a:	8f 91       	pop	r24
     87c:	7f 91       	pop	r23
     87e:	6f 91       	pop	r22
     880:	5f 91       	pop	r21
     882:	4f 91       	pop	r20
     884:	3f 91       	pop	r19
     886:	2f 91       	pop	r18
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	7f 90       	pop	r7
     89e:	6f 90       	pop	r6
     8a0:	5f 90       	pop	r5
     8a2:	4f 90       	pop	r4
     8a4:	3f 90       	pop	r3
     8a6:	2f 90       	pop	r2
     8a8:	1f 90       	pop	r1
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8b0:	08 95       	ret

000008b2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <vPortYieldFromTick>
		asm volatile ( "reti" );
     8b6:	18 95       	reti

000008b8 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	0f 92       	push	r0
     8be:	fc 01       	movw	r30, r24
     8c0:	92 8d       	ldd	r25, Z+26	; 0x1a
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	91 11       	cpse	r25, r1
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	08 95       	ret

000008ce <prvCopyDataToQueue>:
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	04 2f       	mov	r16, r20
     8da:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8dc:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8de:	44 23       	and	r20, r20
     8e0:	b9 f1       	breq	.+110    	; 0x950 <prvCopyDataToQueue+0x82>
     8e2:	01 11       	cpse	r16, r1
     8e4:	16 c0       	rjmp	.+44     	; 0x912 <prvCopyDataToQueue+0x44>
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ea:	9b 81       	ldd	r25, Y+3	; 0x03
     8ec:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <memcpy>
     8f0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	9b 81       	ldd	r25, Y+3	; 0x03
     8f6:	82 0f       	add	r24, r18
     8f8:	91 1d       	adc	r25, r1
     8fa:	9b 83       	std	Y+3, r25	; 0x03
     8fc:	8a 83       	std	Y+2, r24	; 0x02
     8fe:	2c 81       	ldd	r18, Y+4	; 0x04
     900:	3d 81       	ldd	r19, Y+5	; 0x05
     902:	82 17       	cp	r24, r18
     904:	93 07       	cpc	r25, r19
     906:	20 f1       	brcs	.+72     	; 0x950 <prvCopyDataToQueue+0x82>
     908:	88 81       	ld	r24, Y
     90a:	99 81       	ldd	r25, Y+1	; 0x01
     90c:	9b 83       	std	Y+3, r25	; 0x03
     90e:	8a 83       	std	Y+2, r24	; 0x02
     910:	1f c0       	rjmp	.+62     	; 0x950 <prvCopyDataToQueue+0x82>
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	8e 81       	ldd	r24, Y+6	; 0x06
     916:	9f 81       	ldd	r25, Y+7	; 0x07
     918:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <memcpy>
     91c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	91 95       	neg	r25
     922:	81 95       	neg	r24
     924:	91 09       	sbc	r25, r1
     926:	2e 81       	ldd	r18, Y+6	; 0x06
     928:	3f 81       	ldd	r19, Y+7	; 0x07
     92a:	28 0f       	add	r18, r24
     92c:	39 1f       	adc	r19, r25
     92e:	3f 83       	std	Y+7, r19	; 0x07
     930:	2e 83       	std	Y+6, r18	; 0x06
     932:	48 81       	ld	r20, Y
     934:	59 81       	ldd	r21, Y+1	; 0x01
     936:	24 17       	cp	r18, r20
     938:	35 07       	cpc	r19, r21
     93a:	30 f4       	brcc	.+12     	; 0x948 <prvCopyDataToQueue+0x7a>
     93c:	2c 81       	ldd	r18, Y+4	; 0x04
     93e:	3d 81       	ldd	r19, Y+5	; 0x05
     940:	82 0f       	add	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	9f 83       	std	Y+7, r25	; 0x07
     946:	8e 83       	std	Y+6, r24	; 0x06
     948:	02 30       	cpi	r16, 0x02	; 2
     94a:	11 f4       	brne	.+4      	; 0x950 <prvCopyDataToQueue+0x82>
     94c:	11 11       	cpse	r17, r1
     94e:	11 50       	subi	r17, 0x01	; 1
     950:	1f 5f       	subi	r17, 0xFF	; 255
     952:	1a 8f       	std	Y+26, r17	; 0x1a
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <prvCopyDataFromQueue>:
     960:	fc 01       	movw	r30, r24
     962:	44 8d       	ldd	r20, Z+28	; 0x1c
     964:	44 23       	and	r20, r20
     966:	a9 f0       	breq	.+42     	; 0x992 <prvCopyDataFromQueue+0x32>
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	26 81       	ldd	r18, Z+6	; 0x06
     96c:	37 81       	ldd	r19, Z+7	; 0x07
     96e:	24 0f       	add	r18, r20
     970:	35 1f       	adc	r19, r21
     972:	37 83       	std	Z+7, r19	; 0x07
     974:	26 83       	std	Z+6, r18	; 0x06
     976:	84 81       	ldd	r24, Z+4	; 0x04
     978:	95 81       	ldd	r25, Z+5	; 0x05
     97a:	28 17       	cp	r18, r24
     97c:	39 07       	cpc	r19, r25
     97e:	20 f0       	brcs	.+8      	; 0x988 <prvCopyDataFromQueue+0x28>
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	97 83       	std	Z+7, r25	; 0x07
     986:	86 83       	std	Z+6, r24	; 0x06
     988:	cb 01       	movw	r24, r22
     98a:	66 81       	ldd	r22, Z+6	; 0x06
     98c:	77 81       	ldd	r23, Z+7	; 0x07
     98e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <memcpy>
     992:	08 95       	ret

00000994 <prvUnlockQueue>:
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	8c 01       	movw	r16, r24
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	0f 92       	push	r0
     9a6:	fc 01       	movw	r30, r24
     9a8:	c6 8d       	ldd	r28, Z+30	; 0x1e
     9aa:	1c 16       	cp	r1, r28
     9ac:	ac f4       	brge	.+42     	; 0x9d8 <prvUnlockQueue+0x44>
     9ae:	81 89       	ldd	r24, Z+17	; 0x11
     9b0:	81 11       	cpse	r24, r1
     9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <prvUnlockQueue+0x2c>
     9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <prvUnlockQueue+0x44>
     9b6:	f8 01       	movw	r30, r16
     9b8:	81 89       	ldd	r24, Z+17	; 0x11
     9ba:	81 11       	cpse	r24, r1
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <prvUnlockQueue+0x34>
     9be:	0c c0       	rjmp	.+24     	; 0x9d8 <prvUnlockQueue+0x44>
     9c0:	78 01       	movw	r14, r16
     9c2:	f1 e1       	ldi	r31, 0x11	; 17
     9c4:	ef 0e       	add	r14, r31
     9c6:	f1 1c       	adc	r15, r1
     9c8:	c7 01       	movw	r24, r14
     9ca:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskRemoveFromEventList>
     9ce:	81 11       	cpse	r24, r1
     9d0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <vTaskMissedYield>
     9d4:	c1 50       	subi	r28, 0x01	; 1
     9d6:	79 f7       	brne	.-34     	; 0x9b6 <prvUnlockQueue+0x22>
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	f8 01       	movw	r30, r16
     9dc:	86 8f       	std	Z+30, r24	; 0x1e
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	0f 92       	push	r0
     9e8:	c5 8d       	ldd	r28, Z+29	; 0x1d
     9ea:	1c 16       	cp	r1, r28
     9ec:	ac f4       	brge	.+42     	; 0xa18 <prvUnlockQueue+0x84>
     9ee:	80 85       	ldd	r24, Z+8	; 0x08
     9f0:	81 11       	cpse	r24, r1
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <prvUnlockQueue+0x6c>
     9f4:	11 c0       	rjmp	.+34     	; 0xa18 <prvUnlockQueue+0x84>
     9f6:	f8 01       	movw	r30, r16
     9f8:	80 85       	ldd	r24, Z+8	; 0x08
     9fa:	81 11       	cpse	r24, r1
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <prvUnlockQueue+0x74>
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <prvUnlockQueue+0x84>
     a00:	78 01       	movw	r14, r16
     a02:	f8 e0       	ldi	r31, 0x08	; 8
     a04:	ef 0e       	add	r14, r31
     a06:	f1 1c       	adc	r15, r1
     a08:	c7 01       	movw	r24, r14
     a0a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskRemoveFromEventList>
     a0e:	81 11       	cpse	r24, r1
     a10:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <vTaskMissedYield>
     a14:	c1 50       	subi	r28, 0x01	; 1
     a16:	79 f7       	brne	.-34     	; 0x9f6 <prvUnlockQueue+0x62>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	f8 01       	movw	r30, r16
     a1c:	85 8f       	std	Z+29, r24	; 0x1d
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <xQueueGenericReset>:
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	ec 01       	movw	r28, r24
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	0f 92       	push	r0
     a3a:	e8 81       	ld	r30, Y
     a3c:	f9 81       	ldd	r31, Y+1	; 0x01
     a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a40:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	82 9f       	mul	r24, r18
     a48:	a0 01       	movw	r20, r0
     a4a:	83 9f       	mul	r24, r19
     a4c:	50 0d       	add	r21, r0
     a4e:	92 9f       	mul	r25, r18
     a50:	50 0d       	add	r21, r0
     a52:	11 24       	eor	r1, r1
     a54:	4e 0f       	add	r20, r30
     a56:	5f 1f       	adc	r21, r31
     a58:	5d 83       	std	Y+5, r21	; 0x05
     a5a:	4c 83       	std	Y+4, r20	; 0x04
     a5c:	1a 8e       	std	Y+26, r1	; 0x1a
     a5e:	fb 83       	std	Y+3, r31	; 0x03
     a60:	ea 83       	std	Y+2, r30	; 0x02
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	82 9f       	mul	r24, r18
     a66:	a0 01       	movw	r20, r0
     a68:	83 9f       	mul	r24, r19
     a6a:	50 0d       	add	r21, r0
     a6c:	92 9f       	mul	r25, r18
     a6e:	50 0d       	add	r21, r0
     a70:	11 24       	eor	r1, r1
     a72:	cf 01       	movw	r24, r30
     a74:	84 0f       	add	r24, r20
     a76:	95 1f       	adc	r25, r21
     a78:	9f 83       	std	Y+7, r25	; 0x07
     a7a:	8e 83       	std	Y+6, r24	; 0x06
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	8d 8f       	std	Y+29, r24	; 0x1d
     a80:	8e 8f       	std	Y+30, r24	; 0x1e
     a82:	61 11       	cpse	r22, r1
     a84:	0c c0       	rjmp	.+24     	; 0xa9e <xQueueGenericReset+0x70>
     a86:	88 85       	ldd	r24, Y+8	; 0x08
     a88:	88 23       	and	r24, r24
     a8a:	89 f0       	breq	.+34     	; 0xaae <xQueueGenericReset+0x80>
     a8c:	ce 01       	movw	r24, r28
     a8e:	08 96       	adiw	r24, 0x08	; 8
     a90:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskRemoveFromEventList>
     a94:	88 23       	and	r24, r24
     a96:	59 f0       	breq	.+22     	; 0xaae <xQueueGenericReset+0x80>
     a98:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     a9c:	08 c0       	rjmp	.+16     	; 0xaae <xQueueGenericReset+0x80>
     a9e:	ce 01       	movw	r24, r28
     aa0:	08 96       	adiw	r24, 0x08	; 8
     aa2:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     aa6:	ce 01       	movw	r24, r28
     aa8:	41 96       	adiw	r24, 0x11	; 17
     aaa:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <xQueueGenericCreate>:
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	08 2f       	mov	r16, r24
     ac4:	16 2f       	mov	r17, r22
     ac6:	86 9f       	mul	r24, r22
     ac8:	c0 01       	movw	r24, r0
     aca:	11 24       	eor	r1, r1
     acc:	4f 96       	adiw	r24, 0x1f	; 31
     ace:	0e 94 48 01 	call	0x290	; 0x290 <pvPortMalloc>
     ad2:	ec 01       	movw	r28, r24
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	71 f0       	breq	.+28     	; 0xaf4 <xQueueGenericCreate+0x3a>
     ad8:	11 11       	cpse	r17, r1
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <xQueueGenericCreate+0x28>
     adc:	99 83       	std	Y+1, r25	; 0x01
     ade:	88 83       	st	Y, r24
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <xQueueGenericCreate+0x2e>
     ae2:	4f 96       	adiw	r24, 0x1f	; 31
     ae4:	99 83       	std	Y+1, r25	; 0x01
     ae6:	88 83       	st	Y, r24
     ae8:	0b 8f       	std	Y+27, r16	; 0x1b
     aea:	1c 8f       	std	Y+28, r17	; 0x1c
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	ce 01       	movw	r24, r28
     af0:	0e 94 17 05 	call	0xa2e	; 0xa2e <xQueueGenericReset>
     af4:	ce 01       	movw	r24, r28
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <xQueueGenericSend>:
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <xQueueGenericSend+0x18>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <xQueueGenericSend+0x1a>
     b1a:	1f 92       	push	r1
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	8c 01       	movw	r16, r24
     b22:	6b 01       	movw	r12, r22
     b24:	5d 83       	std	Y+5, r21	; 0x05
     b26:	4c 83       	std	Y+4, r20	; 0x04
     b28:	a2 2e       	mov	r10, r18
     b2a:	b1 2c       	mov	r11, r1
     b2c:	99 24       	eor	r9, r9
     b2e:	93 94       	inc	r9
     b30:	7c 01       	movw	r14, r24
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	e8 0e       	add	r14, r24
     b36:	f1 1c       	adc	r15, r1
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	0f 92       	push	r0
     b3e:	f8 01       	movw	r30, r16
     b40:	92 8d       	ldd	r25, Z+26	; 0x1a
     b42:	83 8d       	ldd	r24, Z+27	; 0x1b
     b44:	98 17       	cp	r25, r24
     b46:	18 f0       	brcs	.+6      	; 0xb4e <xQueueGenericSend+0x4e>
     b48:	f2 e0       	ldi	r31, 0x02	; 2
     b4a:	af 12       	cpse	r10, r31
     b4c:	19 c0       	rjmp	.+50     	; 0xb80 <xQueueGenericSend+0x80>
     b4e:	4a 2d       	mov	r20, r10
     b50:	b6 01       	movw	r22, r12
     b52:	c8 01       	movw	r24, r16
     b54:	0e 94 67 04 	call	0x8ce	; 0x8ce <prvCopyDataToQueue>
     b58:	f8 01       	movw	r30, r16
     b5a:	91 89       	ldd	r25, Z+17	; 0x11
     b5c:	99 23       	and	r25, r25
     b5e:	49 f0       	breq	.+18     	; 0xb72 <xQueueGenericSend+0x72>
     b60:	c8 01       	movw	r24, r16
     b62:	41 96       	adiw	r24, 0x11	; 17
     b64:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskRemoveFromEventList>
     b68:	88 23       	and	r24, r24
     b6a:	31 f0       	breq	.+12     	; 0xb78 <xQueueGenericSend+0x78>
     b6c:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <xQueueGenericSend+0x78>
     b72:	81 11       	cpse	r24, r1
     b74:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	50 c0       	rjmp	.+160    	; 0xc20 <xQueueGenericSend+0x120>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	9d 81       	ldd	r25, Y+5	; 0x05
     b84:	89 2b       	or	r24, r25
     b86:	21 f4       	brne	.+8      	; 0xb90 <xQueueGenericSend+0x90>
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	48 c0       	rjmp	.+144    	; 0xc20 <xQueueGenericSend+0x120>
     b90:	b1 10       	cpse	r11, r1
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <xQueueGenericSend+0x9e>
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	0e 94 a8 0a 	call	0x1550	; 0x1550 <vTaskInternalSetTimeOutState>
     b9c:	b9 2c       	mov	r11, r9
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0e 94 8c 08 	call	0x1118	; 0x1118 <vTaskSuspendAll>
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	0f 92       	push	r0
     bac:	f8 01       	movw	r30, r16
     bae:	85 8d       	ldd	r24, Z+29	; 0x1d
     bb0:	8f 3f       	cpi	r24, 0xFF	; 255
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <xQueueGenericSend+0xb6>
     bb4:	15 8e       	std	Z+29, r1	; 0x1d
     bb6:	f8 01       	movw	r30, r16
     bb8:	86 8d       	ldd	r24, Z+30	; 0x1e
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <xQueueGenericSend+0xc0>
     bbe:	16 8e       	std	Z+30, r1	; 0x1e
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	be 01       	movw	r22, r28
     bc6:	6c 5f       	subi	r22, 0xFC	; 252
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 b3 0a 	call	0x1566	; 0x1566 <xTaskCheckForTimeOut>
     bd2:	81 11       	cpse	r24, r1
     bd4:	1f c0       	rjmp	.+62     	; 0xc14 <xQueueGenericSend+0x114>
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	0f 92       	push	r0
     bdc:	f8 01       	movw	r30, r16
     bde:	92 8d       	ldd	r25, Z+26	; 0x1a
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	83 8d       	ldd	r24, Z+27	; 0x1b
     be6:	98 13       	cpse	r25, r24
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <xQueueGenericSend+0x108>
     bea:	6c 81       	ldd	r22, Y+4	; 0x04
     bec:	7d 81       	ldd	r23, Y+5	; 0x05
     bee:	c7 01       	movw	r24, r14
     bf0:	0e 94 4e 0a 	call	0x149c	; 0x149c <vTaskPlaceOnEventList>
     bf4:	c8 01       	movw	r24, r16
     bf6:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>
     bfa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
     bfe:	81 11       	cpse	r24, r1
     c00:	9b cf       	rjmp	.-202    	; 0xb38 <xQueueGenericSend+0x38>
     c02:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     c06:	98 cf       	rjmp	.-208    	; 0xb38 <xQueueGenericSend+0x38>
     c08:	c8 01       	movw	r24, r16
     c0a:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>
     c0e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
     c12:	92 cf       	rjmp	.-220    	; 0xb38 <xQueueGenericSend+0x38>
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>
     c1a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	08 95       	ret

00000c42 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     c42:	9f 92       	push	r9
     c44:	af 92       	push	r10
     c46:	bf 92       	push	r11
     c48:	cf 92       	push	r12
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <xQueueReceive+0x18>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <xQueueReceive+0x1a>
     c5c:	1f 92       	push	r1
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	8c 01       	movw	r16, r24
     c64:	5b 01       	movw	r10, r22
     c66:	5d 83       	std	Y+5, r21	; 0x05
     c68:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     c6a:	e1 2c       	mov	r14, r1
                else if( xEntryTimeSet == pdFALSE )
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
                    xEntryTimeSet = pdTRUE;
     c6c:	99 24       	eor	r9, r9
     c6e:	93 94       	inc	r9
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c70:	6c 01       	movw	r12, r24
     c72:	81 e1       	ldi	r24, 0x11	; 17
     c74:	c8 0e       	add	r12, r24
     c76:	d1 1c       	adc	r13, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c7e:	f8 01       	movw	r30, r16
     c80:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     c82:	ff 20       	and	r15, r15
     c84:	a9 f0       	breq	.+42     	; 0xcb0 <xQueueReceive+0x6e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     c86:	b5 01       	movw	r22, r10
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 b0 04 	call	0x960	; 0x960 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     c8e:	fa 94       	dec	r15
     c90:	f8 01       	movw	r30, r16
     c92:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c94:	80 85       	ldd	r24, Z+8	; 0x08
     c96:	88 23       	and	r24, r24
     c98:	39 f0       	breq	.+14     	; 0xca8 <xQueueReceive+0x66>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c9a:	c8 01       	movw	r24, r16
     c9c:	08 96       	adiw	r24, 0x08	; 8
     c9e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <xTaskRemoveFromEventList>
     ca2:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     ca4:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	51 c0       	rjmp	.+162    	; 0xd52 <xQueueReceive+0x110>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	89 2b       	or	r24, r25
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <xQueueReceive+0x7e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	49 c0       	rjmp	.+146    	; 0xd52 <xQueueReceive+0x110>
                }
                else if( xEntryTimeSet == pdFALSE )
     cc0:	e1 10       	cpse	r14, r1
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <xQueueReceive+0x8c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     cc4:	ce 01       	movw	r24, r28
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     ccc:	e9 2c       	mov	r14, r9
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     cd2:	0e 94 8c 08 	call	0x1118	; 0x1118 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	0f 92       	push	r0
     cdc:	f8 01       	movw	r30, r16
     cde:	85 8d       	ldd	r24, Z+29	; 0x1d
     ce0:	8f 3f       	cpi	r24, 0xFF	; 255
     ce2:	09 f4       	brne	.+2      	; 0xce6 <xQueueReceive+0xa4>
     ce4:	15 8e       	std	Z+29, r1	; 0x1d
     ce6:	f8 01       	movw	r30, r16
     ce8:	86 8d       	ldd	r24, Z+30	; 0x1e
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	09 f4       	brne	.+2      	; 0xcf0 <xQueueReceive+0xae>
     cee:	16 8e       	std	Z+30, r1	; 0x1e
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cf4:	be 01       	movw	r22, r28
     cf6:	6c 5f       	subi	r22, 0xFC	; 252
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 b3 0a 	call	0x1566	; 0x1566 <xTaskCheckForTimeOut>
     d02:	81 11       	cpse	r24, r1
     d04:	1a c0       	rjmp	.+52     	; 0xd3a <xQueueReceive+0xf8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <prvIsQueueEmpty>
     d0c:	88 23       	and	r24, r24
     d0e:	79 f0       	breq	.+30     	; 0xd2e <xQueueReceive+0xec>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d10:	6c 81       	ldd	r22, Y+4	; 0x04
     d12:	7d 81       	ldd	r23, Y+5	; 0x05
     d14:	c6 01       	movw	r24, r12
     d16:	0e 94 4e 0a 	call	0x149c	; 0x149c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     d20:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
     d24:	81 11       	cpse	r24, r1
     d26:	a8 cf       	rjmp	.-176    	; 0xc78 <xQueueReceive+0x36>
                {
                    portYIELD_WITHIN_API();
     d28:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     d2c:	a5 cf       	rjmp	.-182    	; 0xc78 <xQueueReceive+0x36>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     d2e:	c8 01       	movw	r24, r16
     d30:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     d34:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
     d38:	9f cf       	rjmp	.-194    	; 0xc78 <xQueueReceive+0x36>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     d3a:	c8 01       	movw	r24, r16
     d3c:	0e 94 ca 04 	call	0x994	; 0x994 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     d40:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d44:	c8 01       	movw	r24, r16
     d46:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <prvIsQueueEmpty>
     d4a:	88 23       	and	r24, r24
     d4c:	09 f4       	brne	.+2      	; 0xd50 <xQueueReceive+0x10e>
     d4e:	94 cf       	rjmp	.-216    	; 0xc78 <xQueueReceive+0x36>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     d50:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	9f 90       	pop	r9
     d72:	08 95       	ret

00000d74 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     d74:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <pxDelayedTaskList>
     d78:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
     d7c:	80 81       	ld	r24, Z
     d7e:	81 11       	cpse	r24, r1
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <prvResetNextTaskUnblockTime+0x1c>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	9f ef       	ldi	r25, 0xFF	; 255
     d86:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <xNextTaskUnblockTime+0x1>
     d8a:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNextTaskUnblockTime>
     d8e:	08 95       	ret
     d90:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <pxDelayedTaskList>
     d94:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
     d98:	05 80       	ldd	r0, Z+5	; 0x05
     d9a:	f6 81       	ldd	r31, Z+6	; 0x06
     d9c:	e0 2d       	mov	r30, r0
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <xNextTaskUnblockTime+0x1>
     da6:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNextTaskUnblockTime>
     daa:	08 95       	ret

00000dac <prvIdleTask>:
     dac:	07 e6       	ldi	r16, 0x67	; 103
     dae:	16 e0       	ldi	r17, 0x06	; 6
     db0:	0f 2e       	mov	r0, r31
     db2:	ff e8       	ldi	r31, 0x8F	; 143
     db4:	ef 2e       	mov	r14, r31
     db6:	f6 e0       	ldi	r31, 0x06	; 6
     db8:	ff 2e       	mov	r15, r31
     dba:	f0 2d       	mov	r31, r0
     dbc:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxDeletedTasksWaitingCleanUp>
     dc0:	88 23       	and	r24, r24
     dc2:	29 f1       	breq	.+74     	; 0xe0e <prvIdleTask+0x62>
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	0f 92       	push	r0
     dca:	d8 01       	movw	r26, r16
     dcc:	15 96       	adiw	r26, 0x05	; 5
     dce:	ed 91       	ld	r30, X+
     dd0:	fc 91       	ld	r31, X
     dd2:	16 97       	sbiw	r26, 0x06	; 6
     dd4:	c6 81       	ldd	r28, Z+6	; 0x06
     dd6:	d7 81       	ldd	r29, Z+7	; 0x07
     dd8:	ce 01       	movw	r24, r28
     dda:	02 96       	adiw	r24, 0x02	; 2
     ddc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
     de0:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxCurrentNumberOfTasks>
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxCurrentNumberOfTasks>
     dea:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxDeletedTasksWaitingCleanUp>
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <uxDeletedTasksWaitingCleanUp>
     df4:	0f 90       	pop	r0
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	8f 89       	ldd	r24, Y+23	; 0x17
     dfa:	98 8d       	ldd	r25, Y+24	; 0x18
     dfc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <vPortFree>
     e00:	ce 01       	movw	r24, r28
     e02:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <vPortFree>
     e06:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <uxDeletedTasksWaitingCleanUp>
     e0a:	81 11       	cpse	r24, r1
     e0c:	db cf       	rjmp	.-74     	; 0xdc4 <prvIdleTask+0x18>
     e0e:	f7 01       	movw	r30, r14
     e10:	80 81       	ld	r24, Z
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	98 f2       	brcs	.-90     	; 0xdbc <prvIdleTask+0x10>
     e16:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
     e1a:	d0 cf       	rjmp	.-96     	; 0xdbc <prvIdleTask+0x10>

00000e1c <prvAddCurrentTaskToDelayedList>:
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
     e26:	00 91 63 06 	lds	r16, 0x0663	; 0x800663 <xTickCount>
     e2a:	10 91 64 06 	lds	r17, 0x0664	; 0x800664 <xTickCount+0x1>
     e2e:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     e32:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     e36:	02 96       	adiw	r24, 0x02	; 2
     e38:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
     e3c:	c0 0f       	add	r28, r16
     e3e:	d1 1f       	adc	r29, r17
     e40:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     e44:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     e48:	d3 83       	std	Z+3, r29	; 0x03
     e4a:	c2 83       	std	Z+2, r28	; 0x02
     e4c:	c0 17       	cp	r28, r16
     e4e:	d1 07       	cpc	r29, r17
     e50:	68 f4       	brcc	.+26     	; 0xe6c <prvAddCurrentTaskToDelayedList+0x50>
     e52:	60 91 b3 06 	lds	r22, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     e56:	70 91 b4 06 	lds	r23, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     e5a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <pxOverflowDelayedTaskList>
     e5e:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <pxOverflowDelayedTaskList+0x1>
     e62:	6e 5f       	subi	r22, 0xFE	; 254
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	0e 94 48 02 	call	0x490	; 0x490 <vListInsert>
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <prvAddCurrentTaskToDelayedList+0x7e>
     e6c:	60 91 b3 06 	lds	r22, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     e70:	70 91 b4 06 	lds	r23, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     e74:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <pxDelayedTaskList>
     e78:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
     e7c:	6e 5f       	subi	r22, 0xFE	; 254
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	0e 94 48 02 	call	0x490	; 0x490 <vListInsert>
     e84:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xNextTaskUnblockTime>
     e88:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <xNextTaskUnblockTime+0x1>
     e8c:	c8 17       	cp	r28, r24
     e8e:	d9 07       	cpc	r29, r25
     e90:	20 f4       	brcc	.+8      	; 0xe9a <prvAddCurrentTaskToDelayedList+0x7e>
     e92:	d0 93 5b 06 	sts	0x065B, r29	; 0x80065b <xNextTaskUnblockTime+0x1>
     e96:	c0 93 5a 06 	sts	0x065A, r28	; 0x80065a <xNextTaskUnblockTime>
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <xTaskCreate>:
     ea4:	4f 92       	push	r4
     ea6:	5f 92       	push	r5
     ea8:	6f 92       	push	r6
     eaa:	7f 92       	push	r7
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	4c 01       	movw	r8, r24
     ec4:	6b 01       	movw	r12, r22
     ec6:	5a 01       	movw	r10, r20
     ec8:	29 01       	movw	r4, r18
     eca:	ca 01       	movw	r24, r20
     ecc:	0e 94 48 01 	call	0x290	; 0x290 <pvPortMalloc>
     ed0:	3c 01       	movw	r6, r24
     ed2:	89 2b       	or	r24, r25
     ed4:	09 f4       	brne	.+2      	; 0xed8 <xTaskCreate+0x34>
     ed6:	e5 c0       	rjmp	.+458    	; 0x10a2 <xTaskCreate+0x1fe>
     ed8:	86 e2       	ldi	r24, 0x26	; 38
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 48 01 	call	0x290	; 0x290 <pvPortMalloc>
     ee0:	ec 01       	movw	r28, r24
     ee2:	89 2b       	or	r24, r25
     ee4:	59 f0       	breq	.+22     	; 0xefc <xTaskCreate+0x58>
     ee6:	78 8e       	std	Y+24, r7	; 0x18
     ee8:	6f 8a       	std	Y+23, r6	; 0x17
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	a8 1a       	sub	r10, r24
     eee:	b1 08       	sbc	r11, r1
     ef0:	a6 0c       	add	r10, r6
     ef2:	b7 1c       	adc	r11, r7
     ef4:	c1 14       	cp	r12, r1
     ef6:	d1 04       	cpc	r13, r1
     ef8:	29 f4       	brne	.+10     	; 0xf04 <xTaskCreate+0x60>
     efa:	20 c0       	rjmp	.+64     	; 0xf3c <xTaskCreate+0x98>
     efc:	c3 01       	movw	r24, r6
     efe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <vPortFree>
     f02:	cf c0       	rjmp	.+414    	; 0x10a2 <xTaskCreate+0x1fe>
     f04:	d6 01       	movw	r26, r12
     f06:	8c 91       	ld	r24, X
     f08:	89 8f       	std	Y+25, r24	; 0x19
     f0a:	8c 91       	ld	r24, X
     f0c:	88 23       	and	r24, r24
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <xTaskCreate+0x94>
     f10:	ae 01       	movw	r20, r28
     f12:	46 5e       	subi	r20, 0xE6	; 230
     f14:	5f 4f       	sbci	r21, 0xFF	; 255
     f16:	f6 01       	movw	r30, r12
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	b8 e0       	ldi	r27, 0x08	; 8
     f1c:	cb 0e       	add	r12, r27
     f1e:	d1 1c       	adc	r13, r1
     f20:	cf 01       	movw	r24, r30
     f22:	21 91       	ld	r18, Z+
     f24:	da 01       	movw	r26, r20
     f26:	2d 93       	st	X+, r18
     f28:	ad 01       	movw	r20, r26
     f2a:	dc 01       	movw	r26, r24
     f2c:	8c 91       	ld	r24, X
     f2e:	88 23       	and	r24, r24
     f30:	19 f0       	breq	.+6      	; 0xf38 <xTaskCreate+0x94>
     f32:	ec 15       	cp	r30, r12
     f34:	fd 05       	cpc	r31, r13
     f36:	a1 f7       	brne	.-24     	; 0xf20 <xTaskCreate+0x7c>
     f38:	18 a2       	std	Y+32, r1	; 0x20
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <xTaskCreate+0x9a>
     f3c:	19 8e       	std	Y+25, r1	; 0x19
     f3e:	04 30       	cpi	r16, 0x04	; 4
     f40:	08 f0       	brcs	.+2      	; 0xf44 <xTaskCreate+0xa0>
     f42:	03 e0       	ldi	r16, 0x03	; 3
     f44:	0e 8b       	std	Y+22, r16	; 0x16
     f46:	6e 01       	movw	r12, r28
     f48:	b2 e0       	ldi	r27, 0x02	; 2
     f4a:	cb 0e       	add	r12, r27
     f4c:	d1 1c       	adc	r13, r1
     f4e:	c6 01       	movw	r24, r12
     f50:	0e 94 23 02 	call	0x446	; 0x446 <vListInitialiseItem>
     f54:	ce 01       	movw	r24, r28
     f56:	0c 96       	adiw	r24, 0x0c	; 12
     f58:	0e 94 23 02 	call	0x446	; 0x446 <vListInitialiseItem>
     f5c:	d9 87       	std	Y+9, r29	; 0x09
     f5e:	c8 87       	std	Y+8, r28	; 0x08
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	80 1b       	sub	r24, r16
     f66:	91 09       	sbc	r25, r1
     f68:	9d 87       	std	Y+13, r25	; 0x0d
     f6a:	8c 87       	std	Y+12, r24	; 0x0c
     f6c:	db 8b       	std	Y+19, r29	; 0x13
     f6e:	ca 8b       	std	Y+18, r28	; 0x12
     f70:	84 e0       	ldi	r24, 0x04	; 4
     f72:	fe 01       	movw	r30, r28
     f74:	b1 96       	adiw	r30, 0x21	; 33
     f76:	df 01       	movw	r26, r30
     f78:	1d 92       	st	X+, r1
     f7a:	8a 95       	dec	r24
     f7c:	e9 f7       	brne	.-6      	; 0xf78 <xTaskCreate+0xd4>
     f7e:	1d a2       	std	Y+37, r1	; 0x25
     f80:	a2 01       	movw	r20, r4
     f82:	b4 01       	movw	r22, r8
     f84:	c5 01       	movw	r24, r10
     f86:	0e 94 03 03 	call	0x606	; 0x606 <pxPortInitialiseStack>
     f8a:	99 83       	std	Y+1, r25	; 0x01
     f8c:	88 83       	st	Y, r24
     f8e:	e1 14       	cp	r14, r1
     f90:	f1 04       	cpc	r15, r1
     f92:	19 f0       	breq	.+6      	; 0xf9a <xTaskCreate+0xf6>
     f94:	f7 01       	movw	r30, r14
     f96:	d1 83       	std	Z+1, r29	; 0x01
     f98:	c0 83       	st	Z, r28
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	0f 92       	push	r0
     fa0:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxCurrentNumberOfTasks>
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxCurrentNumberOfTasks>
     faa:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <pxCurrentTCB>
     fae:	90 91 b4 06 	lds	r25, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
     fb2:	89 2b       	or	r24, r25
     fb4:	a9 f5       	brne	.+106    	; 0x1020 <xTaskCreate+0x17c>
     fb6:	d0 93 b4 06 	sts	0x06B4, r29	; 0x8006b4 <pxCurrentTCB+0x1>
     fba:	c0 93 b3 06 	sts	0x06B3, r28	; 0x8006b3 <pxCurrentTCB>
     fbe:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxCurrentNumberOfTasks>
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	e9 f5       	brne	.+122    	; 0x1040 <xTaskCreate+0x19c>
     fc6:	8f e8       	ldi	r24, 0x8F	; 143
     fc8:	96 e0       	ldi	r25, 0x06	; 6
     fca:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     fce:	88 e9       	ldi	r24, 0x98	; 152
     fd0:	96 e0       	ldi	r25, 0x06	; 6
     fd2:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     fd6:	81 ea       	ldi	r24, 0xA1	; 161
     fd8:	96 e0       	ldi	r25, 0x06	; 6
     fda:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     fde:	8a ea       	ldi	r24, 0xAA	; 170
     fe0:	96 e0       	ldi	r25, 0x06	; 6
     fe2:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     fe6:	86 e8       	ldi	r24, 0x86	; 134
     fe8:	96 e0       	ldi	r25, 0x06	; 6
     fea:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     fee:	8d e7       	ldi	r24, 0x7D	; 125
     ff0:	96 e0       	ldi	r25, 0x06	; 6
     ff2:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     ff6:	80 e7       	ldi	r24, 0x70	; 112
     ff8:	96 e0       	ldi	r25, 0x06	; 6
     ffa:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
     ffe:	87 e6       	ldi	r24, 0x67	; 103
    1000:	96 e0       	ldi	r25, 0x06	; 6
    1002:	0e 94 15 02 	call	0x42a	; 0x42a <vListInitialise>
    1006:	86 e8       	ldi	r24, 0x86	; 134
    1008:	96 e0       	ldi	r25, 0x06	; 6
    100a:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <pxDelayedTaskList+0x1>
    100e:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <pxDelayedTaskList>
    1012:	8d e7       	ldi	r24, 0x7D	; 125
    1014:	96 e0       	ldi	r25, 0x06	; 6
    1016:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <pxOverflowDelayedTaskList+0x1>
    101a:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <pxOverflowDelayedTaskList>
    101e:	10 c0       	rjmp	.+32     	; 0x1040 <xTaskCreate+0x19c>
    1020:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xSchedulerRunning>
    1024:	81 11       	cpse	r24, r1
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <xTaskCreate+0x19c>
    1028:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    102c:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1030:	96 89       	ldd	r25, Z+22	; 0x16
    1032:	8e 89       	ldd	r24, Y+22	; 0x16
    1034:	89 17       	cp	r24, r25
    1036:	20 f0       	brcs	.+8      	; 0x1040 <xTaskCreate+0x19c>
    1038:	d0 93 b4 06 	sts	0x06B4, r29	; 0x8006b4 <pxCurrentTCB+0x1>
    103c:	c0 93 b3 06 	sts	0x06B3, r28	; 0x8006b3 <pxCurrentTCB>
    1040:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxTaskNumber>
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <uxTaskNumber>
    104a:	8e 89       	ldd	r24, Y+22	; 0x16
    104c:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <uxTopReadyPriority>
    1050:	98 17       	cp	r25, r24
    1052:	10 f4       	brcc	.+4      	; 0x1058 <xTaskCreate+0x1b4>
    1054:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxTopReadyPriority>
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 01       	movw	r18, r24
    105c:	22 0f       	add	r18, r18
    105e:	33 1f       	adc	r19, r19
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	b6 01       	movw	r22, r12
    106e:	81 57       	subi	r24, 0x71	; 113
    1070:	99 4f       	sbci	r25, 0xF9	; 249
    1072:	0e 94 27 02 	call	0x44e	; 0x44e <vListInsertEnd>
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xSchedulerRunning>
    107e:	88 23       	and	r24, r24
    1080:	61 f0       	breq	.+24     	; 0x109a <xTaskCreate+0x1f6>
    1082:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1086:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    108a:	96 89       	ldd	r25, Z+22	; 0x16
    108c:	8e 89       	ldd	r24, Y+22	; 0x16
    108e:	98 17       	cp	r25, r24
    1090:	30 f4       	brcc	.+12     	; 0x109e <xTaskCreate+0x1fa>
    1092:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <xTaskCreate+0x200>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <xTaskCreate+0x200>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <xTaskCreate+0x200>
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	4f 90       	pop	r4
    10c2:	08 95       	ret

000010c4 <vTaskStartScheduler>:
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f8 e5       	ldi	r31, 0x58	; 88
    10ce:	ef 2e       	mov	r14, r31
    10d0:	f6 e0       	ldi	r31, 0x06	; 6
    10d2:	ff 2e       	mov	r15, r31
    10d4:	f0 2d       	mov	r31, r0
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	45 e5       	ldi	r20, 0x55	; 85
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	6c e6       	ldi	r22, 0x6C	; 108
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	86 ed       	ldi	r24, 0xD6	; 214
    10e6:	96 e0       	ldi	r25, 0x06	; 6
    10e8:	0e 94 52 07 	call	0xea4	; 0xea4 <xTaskCreate>
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	81 f4       	brne	.+32     	; 0x1110 <vTaskStartScheduler+0x4c>
    10f0:	f8 94       	cli
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	9f ef       	ldi	r25, 0xFF	; 255
    10f6:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <xNextTaskUnblockTime+0x1>
    10fa:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNextTaskUnblockTime>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xSchedulerRunning>
    1104:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <xTickCount+0x1>
    1108:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <xTickCount>
    110c:	0e 94 6f 03 	call	0x6de	; 0x6de <xPortStartScheduler>
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <vTaskSuspendAll>:
    1118:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <uxSchedulerSuspended>
    1122:	08 95       	ret

00001124 <xTaskIncrementTick>:
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    1138:	81 11       	cpse	r24, r1
    113a:	9f c0       	rjmp	.+318    	; 0x127a <xTaskIncrementTick+0x156>
    113c:	e0 90 63 06 	lds	r14, 0x0663	; 0x800663 <xTickCount>
    1140:	f0 90 64 06 	lds	r15, 0x0664	; 0x800664 <xTickCount+0x1>
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	e8 1a       	sub	r14, r24
    1148:	f8 0a       	sbc	r15, r24
    114a:	f0 92 64 06 	sts	0x0664, r15	; 0x800664 <xTickCount+0x1>
    114e:	e0 92 63 06 	sts	0x0663, r14	; 0x800663 <xTickCount>
    1152:	e1 14       	cp	r14, r1
    1154:	f1 04       	cpc	r15, r1
    1156:	b9 f4       	brne	.+46     	; 0x1186 <xTaskIncrementTick+0x62>
    1158:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <pxDelayedTaskList>
    115c:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
    1160:	20 91 79 06 	lds	r18, 0x0679	; 0x800679 <pxOverflowDelayedTaskList>
    1164:	30 91 7a 06 	lds	r19, 0x067A	; 0x80067a <pxOverflowDelayedTaskList+0x1>
    1168:	30 93 7c 06 	sts	0x067C, r19	; 0x80067c <pxDelayedTaskList+0x1>
    116c:	20 93 7b 06 	sts	0x067B, r18	; 0x80067b <pxDelayedTaskList>
    1170:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <pxOverflowDelayedTaskList+0x1>
    1174:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <pxOverflowDelayedTaskList>
    1178:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNumOfOverflows>
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNumOfOverflows>
    1182:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvResetNextTaskUnblockTime>
    1186:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xNextTaskUnblockTime>
    118a:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <xNextTaskUnblockTime+0x1>
    118e:	e8 16       	cp	r14, r24
    1190:	f9 06       	cpc	r15, r25
    1192:	10 f4       	brcc	.+4      	; 0x1198 <xTaskIncrementTick+0x74>
    1194:	d1 2c       	mov	r13, r1
    1196:	53 c0       	rjmp	.+166    	; 0x123e <xTaskIncrementTick+0x11a>
    1198:	d1 2c       	mov	r13, r1
    119a:	cc 24       	eor	r12, r12
    119c:	c3 94       	inc	r12
    119e:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <pxDelayedTaskList>
    11a2:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
    11a6:	80 81       	ld	r24, Z
    11a8:	81 11       	cpse	r24, r1
    11aa:	07 c0       	rjmp	.+14     	; 0x11ba <xTaskIncrementTick+0x96>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <xNextTaskUnblockTime+0x1>
    11b4:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNextTaskUnblockTime>
    11b8:	42 c0       	rjmp	.+132    	; 0x123e <xTaskIncrementTick+0x11a>
    11ba:	e0 91 7b 06 	lds	r30, 0x067B	; 0x80067b <pxDelayedTaskList>
    11be:	f0 91 7c 06 	lds	r31, 0x067C	; 0x80067c <pxDelayedTaskList+0x1>
    11c2:	05 80       	ldd	r0, Z+5	; 0x05
    11c4:	f6 81       	ldd	r31, Z+6	; 0x06
    11c6:	e0 2d       	mov	r30, r0
    11c8:	c6 81       	ldd	r28, Z+6	; 0x06
    11ca:	d7 81       	ldd	r29, Z+7	; 0x07
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	e8 16       	cp	r14, r24
    11d2:	f9 06       	cpc	r15, r25
    11d4:	28 f4       	brcc	.+10     	; 0x11e0 <xTaskIncrementTick+0xbc>
    11d6:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <xNextTaskUnblockTime+0x1>
    11da:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNextTaskUnblockTime>
    11de:	2f c0       	rjmp	.+94     	; 0x123e <xTaskIncrementTick+0x11a>
    11e0:	8e 01       	movw	r16, r28
    11e2:	0e 5f       	subi	r16, 0xFE	; 254
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	c8 01       	movw	r24, r16
    11e8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    11ec:	8c 89       	ldd	r24, Y+20	; 0x14
    11ee:	9d 89       	ldd	r25, Y+21	; 0x15
    11f0:	89 2b       	or	r24, r25
    11f2:	21 f0       	breq	.+8      	; 0x11fc <xTaskIncrementTick+0xd8>
    11f4:	ce 01       	movw	r24, r28
    11f6:	0c 96       	adiw	r24, 0x0c	; 12
    11f8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    11fc:	8e 89       	ldd	r24, Y+22	; 0x16
    11fe:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <uxTopReadyPriority>
    1202:	98 17       	cp	r25, r24
    1204:	10 f4       	brcc	.+4      	; 0x120a <xTaskIncrementTick+0xe6>
    1206:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxTopReadyPriority>
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	9c 01       	movw	r18, r24
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	b8 01       	movw	r22, r16
    1220:	81 57       	subi	r24, 0x71	; 113
    1222:	99 4f       	sbci	r25, 0xF9	; 249
    1224:	0e 94 27 02 	call	0x44e	; 0x44e <vListInsertEnd>
    1228:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    122c:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1230:	9e 89       	ldd	r25, Y+22	; 0x16
    1232:	86 89       	ldd	r24, Z+22	; 0x16
    1234:	98 17       	cp	r25, r24
    1236:	08 f4       	brcc	.+2      	; 0x123a <xTaskIncrementTick+0x116>
    1238:	b2 cf       	rjmp	.-156    	; 0x119e <xTaskIncrementTick+0x7a>
    123a:	dc 2c       	mov	r13, r12
    123c:	b0 cf       	rjmp	.-160    	; 0x119e <xTaskIncrementTick+0x7a>
    123e:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1242:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1246:	86 89       	ldd	r24, Z+22	; 0x16
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	fc 01       	movw	r30, r24
    125e:	e1 57       	subi	r30, 0x71	; 113
    1260:	f9 4f       	sbci	r31, 0xF9	; 249
    1262:	80 81       	ld	r24, Z
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	10 f0       	brcs	.+4      	; 0x126c <xTaskIncrementTick+0x148>
    1268:	dd 24       	eor	r13, r13
    126a:	d3 94       	inc	r13
    126c:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <xYieldPending>
    1270:	88 23       	and	r24, r24
    1272:	69 f0       	breq	.+26     	; 0x128e <xTaskIncrementTick+0x16a>
    1274:	dd 24       	eor	r13, r13
    1276:	d3 94       	inc	r13
    1278:	0a c0       	rjmp	.+20     	; 0x128e <xTaskIncrementTick+0x16a>
    127a:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <xPendedTicks>
    127e:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <xPendedTicks+0x1>
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xPendedTicks+0x1>
    1288:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xPendedTicks>
    128c:	d1 2c       	mov	r13, r1
    128e:	8d 2d       	mov	r24, r13
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

000012a2 <xTaskResumeAll>:
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	0f 92       	push	r0
    12b6:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <uxSchedulerSuspended>
    12c0:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    12c4:	81 11       	cpse	r24, r1
    12c6:	63 c0       	rjmp	.+198    	; 0x138e <xTaskResumeAll+0xec>
    12c8:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxCurrentNumberOfTasks>
    12cc:	81 11       	cpse	r24, r1
    12ce:	33 c0       	rjmp	.+102    	; 0x1336 <xTaskResumeAll+0x94>
    12d0:	61 c0       	rjmp	.+194    	; 0x1394 <xTaskResumeAll+0xf2>
    12d2:	d7 01       	movw	r26, r14
    12d4:	15 96       	adiw	r26, 0x05	; 5
    12d6:	ed 91       	ld	r30, X+
    12d8:	fc 91       	ld	r31, X
    12da:	16 97       	sbiw	r26, 0x06	; 6
    12dc:	c6 81       	ldd	r28, Z+6	; 0x06
    12de:	d7 81       	ldd	r29, Z+7	; 0x07
    12e0:	ce 01       	movw	r24, r28
    12e2:	0c 96       	adiw	r24, 0x0c	; 12
    12e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    12e8:	8e 01       	movw	r16, r28
    12ea:	0e 5f       	subi	r16, 0xFE	; 254
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    12f4:	8e 89       	ldd	r24, Y+22	; 0x16
    12f6:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <uxTopReadyPriority>
    12fa:	98 17       	cp	r25, r24
    12fc:	10 f4       	brcc	.+4      	; 0x1302 <xTaskResumeAll+0x60>
    12fe:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxTopReadyPriority>
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 01       	movw	r18, r24
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	22 0f       	add	r18, r18
    130c:	33 1f       	adc	r19, r19
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	b8 01       	movw	r22, r16
    1318:	81 57       	subi	r24, 0x71	; 113
    131a:	99 4f       	sbci	r25, 0xF9	; 249
    131c:	0e 94 27 02 	call	0x44e	; 0x44e <vListInsertEnd>
    1320:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1324:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1328:	9e 89       	ldd	r25, Y+22	; 0x16
    132a:	86 89       	ldd	r24, Z+22	; 0x16
    132c:	98 17       	cp	r25, r24
    132e:	68 f0       	brcs	.+26     	; 0x134a <xTaskResumeAll+0xa8>
    1330:	d0 92 5e 06 	sts	0x065E, r13	; 0x80065e <xYieldPending>
    1334:	0a c0       	rjmp	.+20     	; 0x134a <xTaskResumeAll+0xa8>
    1336:	c0 e0       	ldi	r28, 0x00	; 0
    1338:	d0 e0       	ldi	r29, 0x00	; 0
    133a:	0f 2e       	mov	r0, r31
    133c:	f0 e7       	ldi	r31, 0x70	; 112
    133e:	ef 2e       	mov	r14, r31
    1340:	f6 e0       	ldi	r31, 0x06	; 6
    1342:	ff 2e       	mov	r15, r31
    1344:	f0 2d       	mov	r31, r0
    1346:	dd 24       	eor	r13, r13
    1348:	d3 94       	inc	r13
    134a:	f7 01       	movw	r30, r14
    134c:	80 81       	ld	r24, Z
    134e:	81 11       	cpse	r24, r1
    1350:	c0 cf       	rjmp	.-128    	; 0x12d2 <xTaskResumeAll+0x30>
    1352:	cd 2b       	or	r28, r29
    1354:	11 f0       	breq	.+4      	; 0x135a <xTaskResumeAll+0xb8>
    1356:	0e 94 ba 06 	call	0xd74	; 0xd74 <prvResetNextTaskUnblockTime>
    135a:	c0 91 5f 06 	lds	r28, 0x065F	; 0x80065f <xPendedTicks>
    135e:	d0 91 60 06 	lds	r29, 0x0660	; 0x800660 <xPendedTicks+0x1>
    1362:	20 97       	sbiw	r28, 0x00	; 0
    1364:	61 f0       	breq	.+24     	; 0x137e <xTaskResumeAll+0xdc>
    1366:	11 e0       	ldi	r17, 0x01	; 1
    1368:	0e 94 92 08 	call	0x1124	; 0x1124 <xTaskIncrementTick>
    136c:	81 11       	cpse	r24, r1
    136e:	10 93 5e 06 	sts	0x065E, r17	; 0x80065e <xYieldPending>
    1372:	21 97       	sbiw	r28, 0x01	; 1
    1374:	c9 f7       	brne	.-14     	; 0x1368 <xTaskResumeAll+0xc6>
    1376:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <xPendedTicks+0x1>
    137a:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <xPendedTicks>
    137e:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <xYieldPending>
    1382:	88 23       	and	r24, r24
    1384:	31 f0       	breq	.+12     	; 0x1392 <xTaskResumeAll+0xf0>
    1386:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <xTaskResumeAll+0xf2>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <xTaskResumeAll+0xf2>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	08 95       	ret

000013a8 <vTaskDelay>:
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	89 2b       	or	r24, r25
    13b0:	51 f0       	breq	.+20     	; 0x13c6 <vTaskDelay+0x1e>
    13b2:	0e 94 8c 08 	call	0x1118	; 0x1118 <vTaskSuspendAll>
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	ce 01       	movw	r24, r28
    13ba:	0e 94 0e 07 	call	0xe1c	; 0xe1c <prvAddCurrentTaskToDelayedList>
    13be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <xTaskResumeAll>
    13c2:	81 11       	cpse	r24, r1
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vTaskDelay+0x22>
    13c6:	0e 94 a4 03 	call	0x748	; 0x748 <vPortYield>
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <vTaskSwitchContext>:
    13d0:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    13d4:	88 23       	and	r24, r24
    13d6:	21 f0       	breq	.+8      	; 0x13e0 <vTaskSwitchContext+0x10>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <xYieldPending>
    13de:	08 95       	ret
    13e0:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <xYieldPending>
    13e4:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <uxTopReadyPriority>
    13e8:	82 2f       	mov	r24, r18
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	ee 0f       	add	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	e8 0f       	add	r30, r24
    13fc:	f9 1f       	adc	r31, r25
    13fe:	e1 57       	subi	r30, 0x71	; 113
    1400:	f9 4f       	sbci	r31, 0xF9	; 249
    1402:	30 81       	ld	r19, Z
    1404:	31 11       	cpse	r19, r1
    1406:	11 c0       	rjmp	.+34     	; 0x142a <vTaskSwitchContext+0x5a>
    1408:	21 50       	subi	r18, 0x01	; 1
    140a:	82 2f       	mov	r24, r18
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	e8 0f       	add	r30, r24
    141e:	f9 1f       	adc	r31, r25
    1420:	e1 57       	subi	r30, 0x71	; 113
    1422:	f9 4f       	sbci	r31, 0xF9	; 249
    1424:	30 81       	ld	r19, Z
    1426:	33 23       	and	r19, r19
    1428:	79 f3       	breq	.-34     	; 0x1408 <vTaskSwitchContext+0x38>
    142a:	ac 01       	movw	r20, r24
    142c:	44 0f       	add	r20, r20
    142e:	55 1f       	adc	r21, r21
    1430:	44 0f       	add	r20, r20
    1432:	55 1f       	adc	r21, r21
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	48 0f       	add	r20, r24
    143a:	59 1f       	adc	r21, r25
    143c:	da 01       	movw	r26, r20
    143e:	a1 57       	subi	r26, 0x71	; 113
    1440:	b9 4f       	sbci	r27, 0xF9	; 249
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	ed 91       	ld	r30, X+
    1446:	fc 91       	ld	r31, X
    1448:	12 97       	sbiw	r26, 0x02	; 2
    144a:	02 80       	ldd	r0, Z+2	; 0x02
    144c:	f3 81       	ldd	r31, Z+3	; 0x03
    144e:	e0 2d       	mov	r30, r0
    1450:	12 96       	adiw	r26, 0x02	; 2
    1452:	fc 93       	st	X, r31
    1454:	ee 93       	st	-X, r30
    1456:	11 97       	sbiw	r26, 0x01	; 1
    1458:	4e 56       	subi	r20, 0x6E	; 110
    145a:	59 4f       	sbci	r21, 0xF9	; 249
    145c:	e4 17       	cp	r30, r20
    145e:	f5 07       	cpc	r31, r21
    1460:	29 f4       	brne	.+10     	; 0x146c <vTaskSwitchContext+0x9c>
    1462:	42 81       	ldd	r20, Z+2	; 0x02
    1464:	53 81       	ldd	r21, Z+3	; 0x03
    1466:	fd 01       	movw	r30, r26
    1468:	52 83       	std	Z+2, r21	; 0x02
    146a:	41 83       	std	Z+1, r20	; 0x01
    146c:	fc 01       	movw	r30, r24
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	8e 0f       	add	r24, r30
    147c:	9f 1f       	adc	r25, r31
    147e:	fc 01       	movw	r30, r24
    1480:	e1 57       	subi	r30, 0x71	; 113
    1482:	f9 4f       	sbci	r31, 0xF9	; 249
    1484:	01 80       	ldd	r0, Z+1	; 0x01
    1486:	f2 81       	ldd	r31, Z+2	; 0x02
    1488:	e0 2d       	mov	r30, r0
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	97 81       	ldd	r25, Z+7	; 0x07
    148e:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <pxCurrentTCB+0x1>
    1492:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <pxCurrentTCB>
    1496:	20 93 62 06 	sts	0x0662, r18	; 0x800662 <uxTopReadyPriority>
    149a:	08 95       	ret

0000149c <vTaskPlaceOnEventList>:
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	eb 01       	movw	r28, r22
    14a2:	60 91 b3 06 	lds	r22, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    14a6:	70 91 b4 06 	lds	r23, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    14aa:	64 5f       	subi	r22, 0xF4	; 244
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	0e 94 48 02 	call	0x490	; 0x490 <vListInsert>
    14b2:	61 e0       	ldi	r22, 0x01	; 1
    14b4:	ce 01       	movw	r24, r28
    14b6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <prvAddCurrentTaskToDelayedList>
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <xTaskRemoveFromEventList>:
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	dc 01       	movw	r26, r24
    14ca:	15 96       	adiw	r26, 0x05	; 5
    14cc:	ed 91       	ld	r30, X+
    14ce:	fc 91       	ld	r31, X
    14d0:	16 97       	sbiw	r26, 0x06	; 6
    14d2:	c6 81       	ldd	r28, Z+6	; 0x06
    14d4:	d7 81       	ldd	r29, Z+7	; 0x07
    14d6:	8e 01       	movw	r16, r28
    14d8:	04 5f       	subi	r16, 0xF4	; 244
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	c8 01       	movw	r24, r16
    14de:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    14e2:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <uxSchedulerSuspended>
    14e6:	81 11       	cpse	r24, r1
    14e8:	1c c0       	rjmp	.+56     	; 0x1522 <xTaskRemoveFromEventList+0x62>
    14ea:	0a 50       	subi	r16, 0x0A	; 10
    14ec:	11 09       	sbc	r17, r1
    14ee:	c8 01       	movw	r24, r16
    14f0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uxListRemove>
    14f4:	8e 89       	ldd	r24, Y+22	; 0x16
    14f6:	90 91 62 06 	lds	r25, 0x0662	; 0x800662 <uxTopReadyPriority>
    14fa:	98 17       	cp	r25, r24
    14fc:	10 f4       	brcc	.+4      	; 0x1502 <xTaskRemoveFromEventList+0x42>
    14fe:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxTopReadyPriority>
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 01       	movw	r18, r24
    1506:	22 0f       	add	r18, r18
    1508:	33 1f       	adc	r19, r19
    150a:	22 0f       	add	r18, r18
    150c:	33 1f       	adc	r19, r19
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	82 0f       	add	r24, r18
    1514:	93 1f       	adc	r25, r19
    1516:	b8 01       	movw	r22, r16
    1518:	81 57       	subi	r24, 0x71	; 113
    151a:	99 4f       	sbci	r25, 0xF9	; 249
    151c:	0e 94 27 02 	call	0x44e	; 0x44e <vListInsertEnd>
    1520:	05 c0       	rjmp	.+10     	; 0x152c <xTaskRemoveFromEventList+0x6c>
    1522:	b8 01       	movw	r22, r16
    1524:	80 e7       	ldi	r24, 0x70	; 112
    1526:	96 e0       	ldi	r25, 0x06	; 6
    1528:	0e 94 27 02 	call	0x44e	; 0x44e <vListInsertEnd>
    152c:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <pxCurrentTCB>
    1530:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <pxCurrentTCB+0x1>
    1534:	9e 89       	ldd	r25, Y+22	; 0x16
    1536:	86 89       	ldd	r24, Z+22	; 0x16
    1538:	89 17       	cp	r24, r25
    153a:	20 f4       	brcc	.+8      	; 0x1544 <xTaskRemoveFromEventList+0x84>
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <xYieldPending>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <xTaskRemoveFromEventList+0x86>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1550:	20 91 5d 06 	lds	r18, 0x065D	; 0x80065d <xNumOfOverflows>
    1554:	fc 01       	movw	r30, r24
    1556:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1558:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <xTickCount>
    155c:	30 91 64 06 	lds	r19, 0x0664	; 0x800664 <xTickCount+0x1>
    1560:	32 83       	std	Z+2, r19	; 0x02
    1562:	21 83       	std	Z+1, r18	; 0x01
    1564:	08 95       	ret

00001566 <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    156c:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <xTickCount>
    1570:	30 91 64 06 	lds	r19, 0x0664	; 0x800664 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1574:	dc 01       	movw	r26, r24
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	4d 91       	ld	r20, X+
    157a:	5c 91       	ld	r21, X
    157c:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    157e:	e0 91 5d 06 	lds	r30, 0x065D	; 0x80065d <xNumOfOverflows>
    1582:	fc 91       	ld	r31, X
    1584:	fe 17       	cp	r31, r30
    1586:	41 f0       	breq	.+16     	; 0x1598 <xTaskCheckForTimeOut+0x32>
    1588:	24 17       	cp	r18, r20
    158a:	35 07       	cpc	r19, r21
    158c:	28 f0       	brcs	.+10     	; 0x1598 <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    158e:	fb 01       	movw	r30, r22
    1590:	11 82       	std	Z+1, r1	; 0x01
    1592:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1594:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1596:	15 c0       	rjmp	.+42     	; 0x15c2 <xTaskCheckForTimeOut+0x5c>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1598:	24 1b       	sub	r18, r20
    159a:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    159c:	db 01       	movw	r26, r22
    159e:	4d 91       	ld	r20, X+
    15a0:	5c 91       	ld	r21, X
    15a2:	24 17       	cp	r18, r20
    15a4:	35 07       	cpc	r19, r21
    15a6:	48 f4       	brcc	.+18     	; 0x15ba <xTaskCheckForTimeOut+0x54>
    15a8:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    15aa:	42 1b       	sub	r20, r18
    15ac:	53 0b       	sbc	r21, r19
    15ae:	51 83       	std	Z+1, r21	; 0x01
    15b0:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    15b2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <xTaskCheckForTimeOut+0x5c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    15ba:	fb 01       	movw	r30, r22
    15bc:	11 82       	std	Z+1, r1	; 0x01
    15be:	10 82       	st	Z, r1
            xReturn = pdTRUE;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    15c6:	08 95       	ret

000015c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <xYieldPending>
    15ce:	08 95       	ret

000015d0 <__tablejump2__>:
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	05 90       	lpm	r0, Z+
    15d6:	f4 91       	lpm	r31, Z
    15d8:	e0 2d       	mov	r30, r0
    15da:	09 94       	ijmp

000015dc <memcpy>:
    15dc:	fb 01       	movw	r30, r22
    15de:	dc 01       	movw	r26, r24
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <memcpy+0xa>
    15e2:	01 90       	ld	r0, Z+
    15e4:	0d 92       	st	X+, r0
    15e6:	41 50       	subi	r20, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	d8 f7       	brcc	.-10     	; 0x15e2 <memcpy+0x6>
    15ec:	08 95       	ret

000015ee <_exit>:
    15ee:	f8 94       	cli

000015f0 <__stop_program>:
    15f0:	ff cf       	rjmp	.-2      	; 0x15f0 <__stop_program>
